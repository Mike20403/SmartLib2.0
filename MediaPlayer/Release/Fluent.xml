<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Fluent</name>
    </assembly>
    <members>
        <member name="T:Fluent.KeyTipAdorner">
            <summary>
            Represents adorner for KeyTips.
            KeyTipAdorners is chained to produce one from another.
            Detaching root adorner couses detaching all adorners in the chain
            </summary>
        </member>
        <member name="E:Fluent.KeyTipAdorner.Terminated">
            <summary>
            This event is occured when adorner is
            detached and is not able to be attached again
            </summary>
        </member>
        <member name="P:Fluent.KeyTipAdorner.IsAdornerChainAlive">
            <summary>
            Determines whether at least one on the adorners in the chain is alive
            </summary>
        </member>
        <member name="P:Fluent.KeyTipAdorner.AreAnyKeyTipsVisible">
            <summary>
            Returns whether any key tips are visibile.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipAdorner.ActiveKeyTipAdorner">
            <summary>
            Gets the currently active <see cref="T:Fluent.KeyTipAdorner"/> by following eventually present child adorners.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipAdorner.KeyTipInformations">
            <summary>
            Gets a copied list of the currently available <see cref="T:Fluent.KeyTipInformation"/>.
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.#ctor(System.Windows.FrameworkElement,System.Windows.FrameworkElement,Fluent.KeyTipAdorner)">
            <summary>
            Construcotor
            </summary>
            <param name="adornedElement">Element to adorn.</param>
            <param name="parentAdorner">Parent adorner or null.</param>
            <param name="keyTipElementContainer">The element which is container for elements.</param>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Attach">
            <summary>
            Attaches this adorner to the adorned element
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Detach">
            <summary>
            Detaches this adorner from the adorned element
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Terminate(Fluent.KeyTipPressedResult)">
            <summary>
            Terminate whole key tip's adorner chain
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Back">
            <summary>
            Back to the previous adorner.
            </summary>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Forward(System.String,System.Boolean)">
            <summary>
            Forwards to the elements with the given keys
            </summary>
            <param name="keys">Keys</param>
            <param name="click">If true the element will be clicked</param>
            <returns>If the element will be found the function will return true</returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.Forward(System.String,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Forwards to the elements with the given keys to a given element.
            </summary>
            <param name="keys">Keys</param>
            <param name="element">The element to forward to.</param>
            <param name="click">If true the element will be clicked</param>
        </member>
        <member name="M:Fluent.KeyTipAdorner.TryGetKeyTipInformation(System.String)">
            <summary>
            Gets <see cref="T:Fluent.KeyTipInformation"/> by keys.
            </summary>
            <param name="keys">The keys to look for.</param>
            <returns>The <see cref="T:Fluent.KeyTipInformation"/> associated with <paramref name="keys"/>.</returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.ContainsKeyTipStartingWith(System.String)">
            <summary>
            Determines if an of the keytips contained in this adorner start with <paramref name="keys"/>
            </summary>
            <returns><c>true</c> if any keytip start with <paramref name="keys"/>. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Fluent.KeyTipAdorner.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.KeyTipAdorner.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.KeyTipAdorner.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="M:Fluent.KeyTipAdorner.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonProperties">
            <summary>
            Attached Properties for the Fluent Ribbon library
            </summary>
        </member>
        <member name="F:Fluent.RibbonProperties.SizeProperty">
            <summary>
            Using a DependencyProperty as the backing store for Size.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetSize(System.Windows.DependencyObject,Fluent.RibbonControlSize)">
            <summary>
            Sets <see cref="F:Fluent.RibbonProperties.SizeProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetSize(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonProperties.SizeProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonProperties.SizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SizeDefinition.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetSizeDefinition(System.Windows.DependencyObject,Fluent.RibbonControlSizeDefinition)">
            <summary>
            Sets <see cref="F:Fluent.RibbonProperties.SizeDefinitionProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetSizeDefinition(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonProperties.SizeDefinitionProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetAppropriateSize(System.Windows.DependencyObject,Fluent.RibbonGroupBoxState,System.Boolean)">
            <summary>
            Sets appropriate size of the control according to the
            given group box state and control's size definition
            </summary>
            <param name="element">UI Element</param>
            <param name="state">Group box state</param>
            <param name="isSimplified">Group box isSimplified state</param>
        </member>
        <member name="F:Fluent.RibbonProperties.SimplifiedSizeDefinitionProperty">
            <summary>
            Using a DependencyProperty as the backing store for SimplifiedSizeDefinition.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetSimplifiedSizeDefinition(System.Windows.DependencyObject,Fluent.RibbonControlSizeDefinition)">
            <summary>
            Sets <see cref="F:Fluent.RibbonProperties.SimplifiedSizeDefinitionProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetSimplifiedSizeDefinition(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonProperties.SimplifiedSizeDefinitionProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetAppropriateSize(System.Windows.DependencyObject,Fluent.RibbonControlSize)">
            <summary>
            Sets appropriate size of the control according to the
            given ribbon control size and control's size definition
            </summary>
            <param name="element">UI Element</param>
            <param name="size">Ribbon control size before applying SizeDefinition</param>
        </member>
        <member name="F:Fluent.RibbonProperties.MouseOverBackgroundProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for specifying MouseOverBackground.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetMouseOverBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets <see cref="F:Fluent.RibbonProperties.MouseOverBackgroundProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetMouseOverBackground(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonProperties.MouseOverBackgroundProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonProperties.MouseOverForegroundProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for specifying MouseOverForeground.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetMouseOverForeground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets <see cref="F:Fluent.RibbonProperties.MouseOverForegroundProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetMouseOverForeground(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonProperties.MouseOverForegroundProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonProperties.IsSelectedBackgroundProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for specifying IsSelectedBackground.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetIsSelectedBackground(System.Windows.DependencyObject,System.Windows.Media.Brush)">
            <summary>
            Sets <see cref="F:Fluent.RibbonProperties.IsSelectedBackgroundProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetIsSelectedBackground(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonProperties.IsSelectedBackgroundProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonProperties.LastVisibleWidthProperty">
            <summary>
            Stores the last visible width of an element.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetLastVisibleWidth(System.Windows.DependencyObject,System.Double)">
            <summary>Helper for setting <see cref="F:Fluent.RibbonProperties.LastVisibleWidthProperty"/> on <paramref name="element"/>.</summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetLastVisibleWidth(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Fluent.RibbonProperties.LastVisibleWidthProperty"/> on <paramref name="element"/>.</summary>
        </member>
        <member name="F:Fluent.RibbonProperties.IsElementInQuickAccessToolBarProperty">
            <summary>
            Defines if the element is part of the <see cref="T:Fluent.QuickAccessToolBar"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetIsElementInQuickAccessToolBar(System.Windows.DependencyObject,System.Boolean)">
            <summary>Helper for setting <see cref="F:Fluent.RibbonProperties.IsElementInQuickAccessToolBarProperty"/> on <paramref name="element"/>.</summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetIsElementInQuickAccessToolBar(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Fluent.RibbonProperties.IsElementInQuickAccessToolBarProperty"/> on <paramref name="element"/>.</summary>
        </member>
        <member name="F:Fluent.RibbonProperties.IconSizeProperty">
            <summary>
            Defines the desired icon size for the element.
            </summary>
        </member>
        <member name="M:Fluent.RibbonProperties.SetIconSize(System.Windows.DependencyObject,Fluent.IconSize)">
            <summary>Helper for setting <see cref="F:Fluent.RibbonProperties.IconSizeProperty"/> on <paramref name="element"/>.</summary>
        </member>
        <member name="M:Fluent.RibbonProperties.GetIconSize(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Fluent.RibbonProperties.IconSizeProperty"/> from <paramref name="element"/>.</summary>
        </member>
        <member name="T:Fluent.Automation.Peers.GalleryItemAutomationPeer">
            <summary>
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> for <see cref="T:Fluent.GalleryItem"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.SelectorAutomationPeer)">
            <inheritdoc cref="T:System.Windows.Automation.Peers.SelectorItemAutomationPeer" />
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.GalleryItemWrapperAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemWrapperAutomationPeer.#ctor(Fluent.GalleryItem)">
            <inheritdoc cref="T:System.Windows.Automation.Peers.FrameworkElementAutomationPeer" />
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemWrapperAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.GalleryItemWrapperAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.Ribbon"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.#ctor(Fluent.Ribbon)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.GetLocalizedControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.IsOffscreenCore">
            <inheritdoc/>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Automation.Peers.RibbonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonAutomationPeer.CreatePeerForMenu">
            <summary>
            Creates the <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> for <see cref="P:Fluent.Ribbon.Menu"/>.
            </summary>
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonBackstageAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.Backstage"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.#ctor(Fluent.Backstage)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Automation.Peers.RibbonBackstageAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonBackstageTabControlAutomationPeer">
            <summary>
                Automation peer for <see cref="T:Fluent.BackstageTabControl" />.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabControlAutomationPeer.#ctor(Fluent.BackstageTabControl)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabControlAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabControlAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonBackstageTabItemAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.BackstageTabItem"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabItemAutomationPeer.#ctor(Fluent.BackstageTabItem)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabItemAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabItemAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabItemAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonBackstageTabItemAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonButtonAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonButtonAutomationPeer.#ctor(Fluent.Button)">
            <summary>Initializes a new instance of the <see cref="T:ButtonAutomationPeer" /> class.</summary>
            <param name="owner">The element associated with this automation peer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonButtonAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonButtonAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonButtonAutomationPeer.GetAccessKeyCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonButtonAutomationPeer.GetHelpTextCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonCheckBoxAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonCheckBoxAutomationPeer.#ctor(Fluent.CheckBox)">
            <summary>Initializes a new instance of the <see cref="T:ToggleButtonAutomationPeer" /> class.</summary>
            <param name="owner">The element associated with this automation peer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonCheckBoxAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonCheckBoxAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonComboBoxAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonComboBoxAutomationPeer.#ctor(Fluent.ComboBox)">
            <summary>Initializes a new instance of the <see cref="T:ComboBoxAutomationPeer" /> class.</summary>
            <param name="owner">The element associated with this automation peer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonComboBoxAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonComboBoxAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonControlAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.RibbonControl" />.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonControlAutomationPeer.#ctor(Fluent.RibbonControl)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonControlAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonControlDataAutomationPeer">
            <summary>
            Automation peer for ribbon control items.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonControlDataAutomationPeer.#ctor(System.Object,System.Windows.Automation.Peers.ItemsControlAutomationPeer)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonControlDataAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonControlDataAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonControlDataAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.DropDownButton"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.#ctor(Fluent.DropDownButton)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.GetLocalizedControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Automation.Peers.RibbonDropDownButtonAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.RibbonGroupBox"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.#ctor(Fluent.RibbonGroupBox)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.SetFocusCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupBoxAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonGroupHeaderAutomationPeer">
            <summary>
            Automation peer for the header of <see cref="T:Fluent.RibbonGroupBox"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupHeaderAutomationPeer.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupHeaderAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupHeaderAutomationPeer.IsContentElementCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupHeaderAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonGroupHeaderAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonHeaderedControlAutomationPeer">
            <summary>
            Base automation peer for <see cref="T:Fluent.IHeaderedControl"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonHeaderedControlAutomationPeer.#ctor(System.Windows.FrameworkElement)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonHeaderedControlAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonHeaderedControlAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer">
            <summary>
                Automation peer for <see cref="T:Fluent.InRibbonGallery" />
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.#ctor(Fluent.InRibbonGallery)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.Collapse">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.Expand">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Automation.Peers.RibbonInRibbonGalleryAutomationPeer.ExpandCollapseState">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.QuickAccessToolBar"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer.#ctor(Fluent.QuickAccessToolBar)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonQuickAccessToolBarAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonRadioButtonAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonRadioButtonAutomationPeer.#ctor(Fluent.RadioButton)">
            <summary>Initializes a new instance of the <see cref="T:RadioButtonAutomationPeer" /> class.</summary>
            <param name="owner">The element associated with this automation peer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonRadioButtonAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonRadioButtonAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonScreenTipAutomationPeer">
            <summary>
                Automation peer for <see cref="T:Fluent.ScreenTip" />.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonScreenTipAutomationPeer.#ctor(Fluent.ScreenTip)">
            <summary>
                Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonScreenTipAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonScreenTipAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.SplitButton"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.#ctor(Fluent.SplitButton)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.GetAutomationIdCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonSplitButtonAutomationPeer.Invoke">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonTabControlAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.RibbonTabControl"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabControlAutomationPeer.#ctor(Fluent.RibbonTabControl)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabControlAutomationPeer.CreateItemAutomationPeer(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabControlAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabControlAutomationPeer.GetClickablePointCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabControlAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonTabItemAutomationPeer">
            <summary>
            Automation peer wrapper for <see cref="T:Fluent.RibbonTabItem"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemAutomationPeer.#ctor(Fluent.RibbonTabItem)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemAutomationPeer.GetChildrenCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.RibbonTabItem"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.#ctor(System.Object,Fluent.Automation.Peers.RibbonTabControlAutomationPeer)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            If Ribbon.IsMinimized then set Ribbon.IsDropDownOpen to false
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            If Ribbon.IsMinimized then set Ribbon.IsDropDownOpen to true
            </summary>
        </member>
        <member name="P:Fluent.Automation.Peers.RibbonTabItemDataAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Return Ribbon.IsDropDownOpen
            </summary>
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonTextBoxAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTextBoxAutomationPeer.#ctor(Fluent.TextBox)">
            <summary>Initializes a new instance of the <see cref="T:TextBoxAutomationPeer" /> class.</summary>
            <param name="owner">The element associated with this automation peer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTextBoxAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTextBoxAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonTitleBarAutomationPeer">
            <summary>
            Automation peer for <see cref="T:Fluent.RibbonTitleBar"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTitleBarAutomationPeer.#ctor(Fluent.RibbonTitleBar)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTitleBarAutomationPeer.GetAutomationControlTypeCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTitleBarAutomationPeer.IsContentElementCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTitleBarAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonTitleBarAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.RibbonToggleButtonAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonToggleButtonAutomationPeer.#ctor(Fluent.ToggleButton)">
            <summary>Initializes a new instance of the <see cref="T:ToggleButtonAutomationPeer" /> class.</summary>
            <param name="owner">The element associated with this automation peer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonToggleButtonAutomationPeer.GetClassNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.RibbonToggleButtonAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Automation.Peers.TwoLineLabelAutomationPeer">
            <summary>
            <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/> for <see cref="T:Fluent.TwoLineLabel"/>.
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.TwoLineLabelAutomationPeer.#ctor(Fluent.TwoLineLabel)">
            <summary>
            Constructor.
            </summary>
            <param name="owner">Owner of the AutomationPeer.</param>
        </member>
        <member name="M:Fluent.Automation.Peers.TwoLineLabelAutomationPeer.GetChildrenCore">
            <summary>
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetChildrenCore"/>
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.TwoLineLabelAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetAutomationControlTypeCore"/>
            </summary>
        </member>
        <member name="M:Fluent.Automation.Peers.TwoLineLabelAutomationPeer.GetClassNameCore">
            <summary>
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.GetClassNameCore"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.Automation.Peers.TwoLineLabelAutomationPeer.GetNameCore">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Automation.Peers.TwoLineLabelAutomationPeer.IsControlElementCore">
            <summary>
            <see cref="M:System.Windows.Automation.Peers.AutomationPeer.IsControlElementCore"/>
            </summary>
        </member>
        <member name="T:Fluent.Collections.CollectionSyncHelper`1">
            <summary>
            Synchronizes a target collection with a source collection in a one way fashion.
            </summary>
        </member>
        <member name="M:Fluent.Collections.CollectionSyncHelper`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0},System.Collections.IList)">
            <summary>
            Creates a new instance with <paramref name="source"/> as <see cref="P:Fluent.Collections.CollectionSyncHelper`1.Source"/> and <paramref name="target"/> as <see cref="P:Fluent.Collections.CollectionSyncHelper`1.Target"/>.
            </summary>
        </member>
        <member name="P:Fluent.Collections.CollectionSyncHelper`1.Source">
            <summary>
            The source collection.
            </summary>
        </member>
        <member name="P:Fluent.Collections.CollectionSyncHelper`1.Target">
            <summary>
            The target collection.
            </summary>
        </member>
        <member name="M:Fluent.Collections.CollectionSyncHelper`1.SyncTarget">
            <summary>
            Clears <see cref="P:Fluent.Collections.CollectionSyncHelper`1.Target"/> and then copies all items from <see cref="P:Fluent.Collections.CollectionSyncHelper`1.Source"/> to <see cref="P:Fluent.Collections.CollectionSyncHelper`1.Target"/>.
            </summary>
        </member>
        <member name="T:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1">
            <summary>
            Special collection with support for logical children of a parent object.
            </summary>
            <typeparam name="TItem">The type for items.</typeparam>
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.#ctor(Fluent.ILogicalChildSupport)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="parent">The parent which supports logical children.</param>
        </member>
        <member name="P:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.IsOwningItems">
            <summary>
            Gets wether this collections parent has logical ownership of the items.
            </summary>
        </member>
        <member name="P:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.Parent">
            <summary>
            The parent object which support logical children.
            </summary>
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.AquireLogicalOwnership">
            <summary>
            Adds all items to the logical tree of <see cref="P:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.Parent"/>.
            </summary>
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.ReleaseLogicalOwnership">
            <summary>
            Removes all items from the logical tree of <see cref="P:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.Parent"/>.
            </summary>
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.GetLogicalChildren">
            <summary>
            Gets all items where the logical parent is <see cref="P:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.Parent"/>.
            </summary>
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.InsertItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.RemoveItem(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.SetItem(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Collections.ItemCollectionWithLogicalTreeSupport`1.ClearItems">
            <inheritdoc />
        </member>
        <member name="T:Fluent.ApplicationMenu">
            <summary>
            Represents backstage button
            </summary>
        </member>
        <member name="P:Fluent.ApplicationMenu.RightPaneWidth">
            <summary>
            Gets or sets width of right content
            </summary>
        </member>
        <member name="F:Fluent.ApplicationMenu.RightPaneWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.ApplicationMenu.RightPaneWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ApplicationMenu.RightPaneContent">
            <summary>
            Gets or sets application menu right pane content
            </summary>
        </member>
        <member name="F:Fluent.ApplicationMenu.RightPaneContentProperty">
            <summary>Identifies the <see cref="P:Fluent.ApplicationMenu.RightPaneContent"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ApplicationMenu.FooterPaneContent">
            <summary>
            Gets or sets application menu bottom pane content
            </summary>
        </member>
        <member name="F:Fluent.ApplicationMenu.FooterPaneContentProperty">
            <summary>Identifies the <see cref="P:Fluent.ApplicationMenu.FooterPaneContent"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ApplicationMenu.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ApplicationMenu.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.ApplicationMenu.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ApplicationMenu.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ApplicationMenu.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Backstage">
            <summary>
            Represents backstage button
            </summary>
        </member>
        <member name="E:Fluent.Backstage.IsOpenChanged">
            <summary>
            Occurs when IsOpen has been changed
            </summary>
        </member>
        <member name="P:Fluent.Backstage.AdornerLayer">
            <summary>
            Gets the <see cref="P:Fluent.Backstage.AdornerLayer"/> for the <see cref="T:Fluent.Backstage"/>.
            </summary>
            <remarks>This is exposed to make it possible to show content on the same <see cref="P:Fluent.Backstage.AdornerLayer"/> as the backstage is shown on.</remarks>
        </member>
        <member name="P:Fluent.Backstage.IsOpen">
            <summary>
            Gets or sets whether backstage is shown
            </summary>
        </member>
        <member name="F:Fluent.Backstage.IsOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.IsOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Backstage.CanChangeIsOpen">
            <summary>
            Gets or sets whether backstage can be openend or closed.
            </summary>
        </member>
        <member name="F:Fluent.Backstage.CanChangeIsOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.CanChangeIsOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Backstage.HideContextTabsOnOpen">
            <summary>
            Gets or sets whether context tabs on the titlebar should be hidden when backstage is open
            </summary>
        </member>
        <member name="F:Fluent.Backstage.HideContextTabsOnOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.HideContextTabsOnOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Backstage.AreAnimationsEnabled">
            <summary>
            Gets or sets whether opening or closing should be animated.
            </summary>
        </member>
        <member name="F:Fluent.Backstage.AreAnimationsEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.AreAnimationsEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Backstage.CloseOnEsc">
            <summary>
            Gets or sets whether to close the backstage when Esc is pressed
            </summary>
        </member>
        <member name="F:Fluent.Backstage.CloseOnEscProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.CloseOnEsc"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.Backstage.UseHighestAvailableAdornerLayerProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.UseHighestAvailableAdornerLayer"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Backstage.UseHighestAvailableAdornerLayer">
            <summary>
            Gets or sets whether the highest available adorner layer should be used for the <see cref="T:Fluent.BackstageAdorner"/>.
            This means that we will try to look up the visual tree till we find the highest <see cref="T:System.Windows.Documents.AdornerDecorator"/>.
            </summary>
        </member>
        <member name="P:Fluent.Backstage.Content">
            <summary>
            Gets or sets content of the backstage
            </summary>
        </member>
        <member name="F:Fluent.Backstage.ContentProperty">
            <summary>Identifies the <see cref="P:Fluent.Backstage.Content"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Backstage.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Backstage.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Backstage.OnDismissPopup(System.Object,Fluent.DismissPopupEventArgs)">
            <summary>
            Called when this control receives the <see cref="F:Fluent.PopupService.DismissPopupEvent"/>.
            </summary>
        </member>
        <member name="M:Fluent.Backstage.Show">
            <summary>
            Shows the <see cref="T:Fluent.Backstage"/>
            </summary>
            <returns>
            <c>true</c> if the <see cref="T:Fluent.Backstage"/> was made visible.
            <c>false</c> if the <see cref="T:Fluent.Backstage"/> was not made visible.
            </returns>
        </member>
        <member name="M:Fluent.Backstage.Hide">
            <summary>
            Hides the <see cref="T:Fluent.Backstage"/>
            </summary>
        </member>
        <member name="M:Fluent.Backstage.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Backstage.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.BackstageAdorner">
            <summary>
            Represents adorner for Backstage
            </summary>
        </member>
        <member name="M:Fluent.BackstageAdorner.#ctor(System.Windows.FrameworkElement,Fluent.Backstage)">
            <summary>
            Initializes a new instance of the <see cref="T:Fluent.BackstageAdorner"/> class.
            </summary>
            <param name="adornedElement">Adorned element</param>
            <param name="backstage">Backstage</param>
        </member>
        <member name="P:Fluent.BackstageAdorner.Backstage">
            <summary>
            Gets the <see cref="T:Fluent.Backstage"/>.
            </summary>
        </member>
        <member name="M:Fluent.BackstageAdorner.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageAdorner.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.BackstageAdorner.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageAdorner.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.BackstageTabControl">
            <summary>
            Represents Backstage tab control.
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.SelectedContentMargin">
            <summary>
            Gets or sets the margin which is used to render selected content.
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.SelectedContentMarginProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.SelectedContentMargin"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.SelectedContentProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.SelectedContent"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.SelectedContent">
            <summary>
            Gets content for selected tab
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.ContentStringFormatProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.ContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.ContentTemplateProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.ContentTemplate"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.ContentTemplateSelectorProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.ContentTemplateSelector"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.SelectedContentStringFormatProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.SelectedContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.SelectedContentTemplateProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.SelectedContentTemplate"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.SelectedContentTemplateSelectorProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.SelectedContentTemplateSelector"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.ContentStringFormat">
            <summary>
            Get or sets the string format for the content.
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.ContentTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> which should be used for the content
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.ContentTemplateSelector">
            <summary>
            Gets or sets the <see cref="P:Fluent.BackstageTabControl.ContentTemplateSelector"/> which should be used for the content
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.SelectedContentStringFormat">
            <summary>
            Get or sets the string format for the selected content.
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.SelectedContentTemplate">
            <summary>
            Gets or sets the <see cref="T:System.Windows.DataTemplate"/> which should be used for the selected content
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.SelectedContentTemplateSelector">
            <summary>
            Gets or sets the <see cref="P:Fluent.BackstageTabControl.ContentTemplateSelector"/> which should be used for the selected content
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.ItemsPanelMinWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.ItemsPanelMinWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.ItemsPanelMinWidth">
            <summary>
            Gets or sets the MinWidth for the ItemsPanel.
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.ItemsPanelBackground">
            <summary>
            Gets or sets current Backround of the ItemsPanel
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.ItemsPanelBackgroundProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.ItemsPanelBackground"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.ParentBackstage">
            <summary>
            Gets or sets the <see cref="P:Fluent.BackstageTabControl.ParentBackstage"/>
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.ParentBackstageProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.ParentBackstage"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.IsWindowSteeringHelperEnabled">
            <summary>
            Defines if the <see cref="T:Fluent.WindowSteeringHelperControl"/> is enabled in this control
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.IsWindowSteeringHelperEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.IsWindowSteeringHelperEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabControl.IsBackButtonVisible">
            <summary>
            Defines if the back button is visible or not.
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabControl.IsBackButtonVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabControl.IsBackButtonVisible"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.BackstageTabControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabControl.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabControl.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.GetSelectedTabItem">
            <summary>
            Gets selected <see cref="T:Fluent.BackstageTabItem"/>.
            If there is no item selected, the first found item is selected and it's container (<see cref="T:Fluent.BackstageTabItem"/>) is returned.
            </summary>
            <returns>The currently selected <see cref="T:Fluent.BackstageTabItem"/>. Or null of nothing was selected and nothing could be selected.</returns>
        </member>
        <member name="M:Fluent.BackstageTabControl.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabControl.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.BackstageTabControl.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.BackstageTabItem">
            <summary>
            Represents backstage tab item
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabItem.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabItem.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.BackstageTabItem.KeyTipProperty">
            <summary>
            Dependency property for <see cref="P:Fluent.BackstageTabItem.KeyTip"/>
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether the tab is selected
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabItem.IsSelectedProperty">
            <summary>
            Dependency property for <see cref="P:Fluent.BackstageTabItem.IsSelected"/>
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.TabControlParent">
            <summary>
            Gets parent tab control
            </summary>
        </member>
        <member name="P:Fluent.BackstageTabItem.Header">
            <summary>
            Gets or sets tab items text
            </summary>
        </member>
        <member name="F:Fluent.BackstageTabItem.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.BackstageTabItem.Header"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.BackstageTabItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.OnContentChanged(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Handles selected event
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            Handles unselected event
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.HandleIsSelectedChanged(System.Windows.RoutedEventArgs)">
            <summary>
            Handles IsSelected changed
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:Fluent.BackstageTabItem.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.BackstageTabItem.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.BackstageTabItem.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Button">
            <summary>
            Represents button
            </summary>
        </member>
        <member name="P:Fluent.Button.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.KeyTipProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for <see cref="P:Fluent.Button.KeyTip"/>.
            </summary>
        </member>
        <member name="P:Fluent.Button.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.LargeIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="F:Fluent.Button.IsDefinitiveProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.IsDefinitive"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Button.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.Button.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.Button.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Button.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Button.OnClick">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Button.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Button.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Button.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.Button.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.Button.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Button.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Button.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Button.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Button.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Button.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Button.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.CheckBox">
            <summary>
            Represents Fluent UI specific CheckBox
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.CheckBox.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.LargeIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.CheckBox.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.CheckBox.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.CheckBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.CheckBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.CheckBox.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.CheckBox.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.CheckBox.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.CheckBox.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.CheckBox.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.CheckBox.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.CheckBox.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.CheckBox.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.CheckBox.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.CheckBox.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.CheckBox.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.ColorGalleryMode">
            <summary>
            Represents color gallery modes
            </summary>
        </member>
        <member name="F:Fluent.ColorGalleryMode.HighlightColors">
            <summary>
            Color gallery displays only fixed highlight colors
            </summary>
        </member>
        <member name="F:Fluent.ColorGalleryMode.StandardColors">
            <summary>
            Color gallery displays only fixed standart colors
            </summary>
        </member>
        <member name="F:Fluent.ColorGalleryMode.ThemeColors">
            <summary>
            Color gallery displays theme colors
            </summary>
        </member>
        <member name="T:Fluent.ColorGradientItemTemplateSelector">
            <summary>
            Date template selector for gradients
            </summary>
        </member>
        <member name="M:Fluent.ColorGradientItemTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a <see cref="T:System.Windows.DataTemplate"/> based on custom logic.
            </summary>
            <returns>
            Returns a <see cref="T:System.Windows.DataTemplate"/> or null. The default value is null.
            </returns>
            <param name="item">The data object for which to select the template.</param><param name="container">The data-bound object.</param>
        </member>
        <member name="T:Fluent.MoreColorsExecutingEventArgs">
            <summary>
            More colors event args
            </summary>
        </member>
        <member name="P:Fluent.MoreColorsExecutingEventArgs.Color">
            <summary>
            Gets or sets choosed color
            </summary>
        </member>
        <member name="P:Fluent.MoreColorsExecutingEventArgs.Canceled">
            <summary>
            Gets or sets a value indicating whether more colors is canceled
            </summary>
        </member>
        <member name="T:Fluent.ColorGallery">
            <summary>
            Represents color gallery
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.HighlightColors">
            <summary>
            Hightlight colors array
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardColors">
            <summary>
            Standard colors array
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardThemeColors">
            <summary>
            Standard colors array in ThemeColor mode
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.RecentColors">
            <summary>
            Gets recent colors collection
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.Mode">
            <summary>
            Gets or sets color gallery mode
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ModeProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.Mode"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.ChipWidth">
            <summary>
            Gets or sets chip width
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ChipWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.ChipWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.ChipHeight">
            <summary>
            Gets or sets chip height
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ChipHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.ChipHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsAutomaticColorButtonVisible">
            <summary>
            Gets or sets a value indicating whether Automatic button is visible
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsAutomaticColorButtonVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.IsAutomaticColorButtonVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsNoColorButtonVisible">
            <summary>
            Gets or sets a value indicating whether No color button is visible
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsNoColorButtonVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.IsNoColorButtonVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.IsMoreColorsButtonVisible">
            <summary>
            Gets or sets a value indicating whether More Colors button is visible
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.IsMoreColorsButtonVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.IsMoreColorsButtonVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.Columns">
            <summary>
            Gets or sets number of color gallery columns. It works only when Mode is ThemeColors
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ColumnsProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.Columns"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.StandardColorGridRows">
            <summary>
            Gets or set number of standard color rows. Work only when Mode is ThemeColors
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardColorGridRowsProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.StandardColorGridRows"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeColorGridRows">
            <summary>
            Gets or set number of theme color rows. Work only when Mode is ThemeColors
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ThemeColorGridRowsProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.ThemeColorGridRows"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.SelectedColor">
            <summary>
            Gets or sets selected color
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.SelectedColorProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.SelectedColor"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeColors">
            <summary>
            Gets collection of theme colors
            </summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeColorsSource">
            <summary>
            Gets or sets theme colors source
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ThemeColorsSourceProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.ThemeColorsSource"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.ThemeGradients">
            <summary>
            Gets theme gradients collection
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.ThemeGradientsProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.ThemeGradients"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ColorGallery.StandardGradients">
            <summary>
            Gets standart gradients collection
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.StandardGradientsProperty">
            <summary>Identifies the <see cref="P:Fluent.ColorGallery.StandardGradients"/> dependency property.</summary>
        </member>
        <member name="E:Fluent.ColorGallery.SelectedColorChanged">
            <summary>
            Occurs when selection color is changed
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.SelectedColorChangedEvent">
            <summary>
            Identifies the SelectedColorChanged routed event.
            </summary>
        </member>
        <member name="E:Fluent.ColorGallery.MoreColorsExecuting">
            <summary>
            Occurs whether more colors menu item is clicked
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ColorGallery.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ColorGallery.GetBrightness(System.Windows.Media.Color)">
            <summary>
            Returns brightness of the given color from 0..1
            </summary>
            <param name="color">Color</param>
            <returns>Brightness of the given color from 0..1</returns>
        </member>
        <member name="M:Fluent.ColorGallery.GetGradient(System.Windows.Media.Color,System.Int32)">
            <summary>
            Makes gradient colors from lighter to darker
            </summary>
            <param name="color">Base color</param>
            <param name="count">Count of items in the gradient</param>
            <returns>Colors from lighter to darker</returns>
        </member>
        <member name="M:Fluent.ColorGallery.ChooseColor(Fluent.ColorGallery.CHOOSECOLOR)">
            <summary>
            Creates a Color dialog box that enables the user to select a color.
            </summary>
            <param name="lpcc">A pointer to a CHOOSECOLOR structure that contains information used to initialize the dialog box. When ChooseColor returns, this structure contains information about the user's color selection.</param>
            <returns>If the user clicks the OK button of the dialog box, the return value is nonzero. The rgbResult member of the CHOOSECOLOR structure contains the RGB color value of the color selected by the user.If the user cancels or closes the Color dialog box or an error occurs, the return value is zero. </returns>
        </member>
        <member name="T:Fluent.ColorGallery.CHOOSECOLOR">
            <summary>
            Contains information the ChooseColor function uses to initialize the Color dialog box. After the user closes the dialog box, the system returns information about the user's selection in this structure. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.lStructSize">
            <summary>
            The length, in bytes, of the structure. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.hwndOwner">
            <summary>
            A handle to the window that owns the dialog box. This member can be any valid window handle, or it can be NULL if the dialog box has no owner. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.hInstance">
            <summary>
            If the CC_ENABLETEMPLATEHANDLE flag is set in the Flags member, hInstance is a handle to a memory object containing a dialog box template. If the CC_ENABLETEMPLATE flag is set, hInstance is a handle to a module that contains a dialog box template named by the lpTemplateName member. If neither CC_ENABLETEMPLATEHANDLE nor CC_ENABLETEMPLATE is set, this member is ignored. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.rgbResult">
            <summary>
            If the CC_RGBINIT flag is set, rgbResult specifies the color initially selected when the dialog box is created. If the specified color value is not among the available colors, the system selects the nearest solid color available. If rgbResult is zero or CC_RGBINIT is not set, the initially selected color is black. If the user clicks the OK button, rgbResult specifies the user's color selection. To create a COLORREF color value, use the RGB macro. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.lpCustColors">
            <summary>
            A pointer to an array of 16 values that contain red, green, blue (RGB) values for the custom color boxes in the dialog box. If the user modifies these colors, the system updates the array with the new RGB values. To preserve new custom colors between calls to the ChooseColor function, you should allocate static memory for the array. To create a COLORREF color value, use the RGB macro. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.Flags">
            <summary>
            A set of bit flags that you can use to initialize the Color dialog box. When the dialog box returns, it sets these flags to indicate the user's input. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.lCustData">
            <summary>
            Application-defined data that the system passes to the hook procedure identified by the lpfnHook member. When the system sends the WM_INITDIALOG message to the hook procedure, the message's lParam parameter is a pointer to the CHOOSECOLOR structure specified when the dialog was created. The hook procedure can use this pointer to get the lCustData value. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.lpfnHook">
            <summary>
            A pointer to a CCHookProc hook procedure that can process messages intended for the dialog box. This member is ignored unless the CC_ENABLEHOOK flag is set in the Flags member. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CHOOSECOLOR.lpTemplateName">
            <summary>
            The name of the dialog box template resource in the module identified by the hInstance member. This template is substituted for the standard dialog box template. For numbered dialog box resources, lpTemplateName can be a value returned by the MAKEINTRESOURCE macro. This member is ignored unless the CC_ENABLETEMPLATE flag is set in the Flags member. 
            </summary>
        </member>
        <member name="F:Fluent.ColorGallery.CC_ANYCOLOR">
            <summary>
            Causes the dialog box to display all available colors in the set of basic colors.
            </summary>
        </member>
        <member name="T:Fluent.ComboBox">
            <summary>
                Represents custom Fluent UI ComboBox
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.KeyTipProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.KeyTip"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.DropDownPopup">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ComboBox.IsContextMenuOpened">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ComboBox.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.TopPopupContent">
            <summary>
            Gets or sets content to show on the top side of the Popup.
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.TopPopupContentProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.TopPopupContent"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.TopPopupContentTemplate">
            <summary>
            Gets or sets top content template.
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.TopPopupContentTemplateProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.TopPopupContentTemplate"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.TopPopupContentTemplateSelector">
            <summary>
            Gets or sets top content template selector.
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.TopPopupContentTemplateSelectorProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.TopPopupContentTemplateSelector"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.TopPopupContentStringFormat">
            <summary>
            Gets or sets top content template string format.
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.TopPopupContentStringFormatProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.TopPopupContentStringFormat"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.Menu">
            <summary>
                Gets or sets menu to show in combo box bottom
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.MenuProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.Menu"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.InputWidth">
            <summary>
                Gets or sets width of the value input part of combobox
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.InputWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.InputWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.ResizeMode">
            <summary>
                Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.ResizeModeProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.ResizeMode"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.IsSnapped">
            <summary>
                Snaps / Unsnaps the Visual
                (remove visuals and substitute with freezed image)
            </summary>
        </member>
        <member name="P:Fluent.ComboBox.DropDownHeight">
            <summary>
                Gets or sets initial dropdown height
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.DropDownHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.DropDownHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ComboBox.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.ComboBox.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ComboBox.#cctor">
            <summary>
                Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.#ctor">
            <summary>
                Default Constructor
            </summary>
        </member>
        <member name="M:Fluent.ComboBox.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ComboBox.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ComboBox.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.ComboBox.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ComboBox.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnDropDownOpened(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnDropDownClosed(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ComboBox.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ComboBox.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.ContextMenuResizeMode">
            <summary>
            Represents context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.ContextMenuResizeMode.None">
            <summary>
            Context menu can not be resized
            </summary>
        </member>
        <member name="F:Fluent.ContextMenuResizeMode.Vertical">
            <summary>
            Context menu can be only resized vertically
            </summary>
        </member>
        <member name="F:Fluent.ContextMenuResizeMode.Both">
            <summary>
            Context menu can be resized vertically and horizontally
            </summary>
        </member>
        <member name="T:Fluent.ContextMenu">
            <summary>
            Represents a pop-up menu that enables a control
            to expose functionality that is specific to the context of the control
            </summary>
        </member>
        <member name="P:Fluent.ContextMenu.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.ContextMenu.ResizeModeProperty">
            <summary>Identifies the <see cref="P:Fluent.ContextMenu.ResizeMode"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ContextMenu.#cctor">
            <summary>
            Static constructor
            </summary>]
        </member>
        <member name="M:Fluent.ContextMenu.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ContextMenu.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ContextMenu.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.DropDownButton">
            <summary>
            Represents drop down button
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.Size">
            <summary>
            Gets or sets Size for the element.
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.DropDownButton.DropDownPopup">
            <inheritdoc />
        </member>
        <member name="P:Fluent.DropDownButton.IsContextMenuOpened">
            <inheritdoc />
        </member>
        <member name="P:Fluent.DropDownButton.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.LargeIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.HasTriangle">
            <summary>
            Gets or sets whether button has triangle
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.HasTriangleProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.HasTriangle"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.IsDropDownOpen">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.ResizeModeProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.ResizeMode"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.MaxDropDownHeight">
            <summary>
            Get or sets max height of drop down popup
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.MaxDropDownHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.MaxDropDownHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.DropDownHeight">
            <summary>
            Gets or sets initial dropdown height
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.DropDownHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.DropDownHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.ClosePopupOnMouseDown">
            <summary>
            Gets or sets whether the popup of this drop down button should automatically be closed on mouse down.
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.ClosePopupOnMouseDownProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.ClosePopupOnMouseDown"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.ClosePopupOnMouseDownDelay">
            <summary>
            Gets or sets the delay in milliseconds to close the popup on mouse down.
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.ClosePopupOnMouseDownDelayProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.ClosePopupOnMouseDownDelay"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.DropDownButton.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.DropDownButton.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.DropDownButton.OnIsSimplifiedChanged(System.Boolean,System.Boolean)">
            <summary>
            Handles IsSimplified changed event for overide
            </summary>
            <param name="oldValue">old value</param>
            <param name="newValue">new value</param>
        </member>
        <member name="E:Fluent.DropDownButton.DropDownOpened">
            <inheritdoc />
        </member>
        <member name="E:Fluent.DropDownButton.DropDownClosed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.OnDropDownOpened">
            <summary>
            Called when drop down opened.
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.OnDropDownClosed">
            <summary>
            Called when drop down closed.
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.OnQuickAccessOpened(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu opened
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.OnQuickAccessMenuClosedOrUnloaded(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu closed
            </summary>
        </member>
        <member name="M:Fluent.DropDownButton.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overridden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="M:Fluent.DropDownButton.BindQuickAccessItemDropDownEvents(Fluent.DropDownButton)">
            <summary>
            Binds the DropDownClosed and DropDownOpened events to the created quick access item
            </summary>
            <param name="button">Toolbar item</param>
        </member>
        <member name="P:Fluent.DropDownButton.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.DropDownButton.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.DropDownButton.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.DropDownButton.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.DropDownButton.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.DropDownButton.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Gallery">
            <summary>
            Represents gallery control.
            Usually a gallery is hosted in context menu
            </summary>
        </member>
        <member name="P:Fluent.Gallery.MinItemsInRow">
            <summary>
            Min width of the Gallery
            </summary>
        </member>
        <member name="F:Fluent.Gallery.MinItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.MinItemsInRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.MaxItemsInRow">
            <summary>
            Max width of the Gallery
            </summary>
        </member>
        <member name="F:Fluent.Gallery.MaxItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.MaxItemsInRow"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.Gallery.IsGroupedProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.IsGrouped"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.IsGrouped">
            <summary>
            Gets or sets whether the inner gallery panel shows groups
            (Filter property still works as usual)
            </summary>
        </member>
        <member name="P:Fluent.Gallery.GroupBy">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="F:Fluent.Gallery.GroupByProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.GroupBy"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.GroupByAdvanced">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="F:Fluent.Gallery.GroupByAdvancedProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.GroupByAdvanced"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.Orientation">
            <summary>
            Gets or sets orientation of gallery
            </summary>
        </member>
        <member name="F:Fluent.Gallery.OrientationProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.Orientation"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.ItemWidth">
            <summary>
            Gets or sets item width
            </summary>
        </member>
        <member name="F:Fluent.Gallery.ItemWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.ItemWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.ItemHeight">
            <summary>
            Gets or sets item height
            </summary>
        </member>
        <member name="F:Fluent.Gallery.ItemHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.ItemHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.Filters">
            <summary>
            Gets collection of filters
            </summary>
        </member>
        <member name="P:Fluent.Gallery.SelectedFilter">
            <summary>
            Gets or sets selected filter
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectedFilterProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.SelectedFilter"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.SelectedFilterTitle">
            <summary>
            Gets selected filter title
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectedFilterTitleProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.SelectedFilterTitle"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.SelectedFilterGroups">
            <summary>
            Gets selected filter groups
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectedFilterGroupsProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.SelectedFilterGroups"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.HasFilter">
            <summary>
            Gets whether gallery has selected filter
            </summary>
        </member>
        <member name="F:Fluent.Gallery.HasFilterProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.HasFilter"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.Selectable">
            <summary>
            Gets or sets whether gallery items can be selected
            </summary>
        </member>
        <member name="F:Fluent.Gallery.SelectableProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.Selectable"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Gallery.IsLastItem">
            <summary>
            Gets whether gallery is last item in ItemsControl
            </summary>
        </member>
        <member name="F:Fluent.Gallery.IsLastItemPropertyKey">
            <summary>Identifies the <see cref="P:Fluent.Gallery.IsLastItem"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.Gallery.IsLastItemProperty">
            <summary>Identifies the <see cref="P:Fluent.Gallery.IsLastItem"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.Gallery.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Gallery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Gallery.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Gallery.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Gallery.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="T:Fluent.GalleryGroupContainer">
            <summary>
            Represents container of grouped gallery items in GalleryPanel or Gallery
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.IsHeadered">
            <summary>
            Gets or sets whether the header must be shown.
            When the property is false this control uses to show all items without grouping
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.IsHeaderedProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupContainer.IsHeadered"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.Orientation">
            <summary>
            Gets or sets panel orientation
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.OrientationProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupContainer.Orientation"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of
            all items that are contained within
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.ItemWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupContainer.ItemWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of
            all items that are contained within
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.ItemHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupContainer.ItemHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.MinItemsInRow">
            <summary>
            Gets or sets minimum items in which should be placed in one row.
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.MinItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupContainer.MinItemsInRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryGroupContainer.MaxItemsInRow">
            <summary>
            Gets or sets maximum items in which should be placed in one row.
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupContainer.MaxItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupContainer.MaxItemsInRow"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.GalleryGroupContainer.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryGroupContainer.OnItemsPanelChanged(System.Windows.Controls.ItemsPanelTemplate,System.Windows.Controls.ItemsPanelTemplate)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.GalleryGroupFilter">
            <summary>
            Represents gallery group filter definition
            </summary>
        </member>
        <member name="P:Fluent.GalleryGroupFilter.Title">
            <summary>
            Gets or sets title of filter
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupFilter.TitleProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupFilter.Title"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryGroupFilter.Groups">
            <summary>
            Gets or sets list pf groups splitted by comma
            </summary>
        </member>
        <member name="F:Fluent.GalleryGroupFilter.GroupsProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryGroupFilter.Groups"/> dependency property.</summary>
        </member>
        <member name="T:Fluent.GalleryItem">
            <summary>
            Represents gallery item
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.GalleryItem.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.IsPressed">
            <summary>
            Gets a value that indicates whether a Button is currently activated.
            This is a dependency property.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.IsPressedProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.IsPressed"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryItem.Group">
            <summary>
            Gets or sets GalleryItem group
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.GroupProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.Group"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryItem.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage or popup.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.IsDefinitiveProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.IsDefinitive"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryItem.Command">
            <inheritdoc />
        </member>
        <member name="P:Fluent.GalleryItem.CommandParameter">
            <inheritdoc />
        </member>
        <member name="P:Fluent.GalleryItem.CommandTarget">
            <inheritdoc />
        </member>
        <member name="F:Fluent.GalleryItem.CommandParameterProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.CommandParameter"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.GalleryItem.CommandProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.Command"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.GalleryItem.CommandTargetProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.CommandTarget"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryItem.PreviewCommand">
            <summary>
            Gets or sets the command to invoke when mouse enters or leaves this button. The commandparameter will be the <see cref="T:Fluent.GalleryItem"/> instance.
            This is a dependency property.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.PreviewCommandProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.PreviewCommand"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryItem.CancelPreviewCommand">
            <summary>
            Gets or sets the command to invoke when mouse enters or leaves this button. The commandparameter will be the <see cref="T:Fluent.GalleryItem"/> instance.
            This is a dependency property.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.CancelPreviewCommandProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryItem.CancelPreviewCommand"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.GalleryItem.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles Command changed
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles Command CanExecute changed
            </summary>
        </member>
        <member name="P:Fluent.GalleryItem.IsEnabledCore">
            <inheritdoc />
        </member>
        <member name="E:Fluent.GalleryItem.Click">
            <summary>
            Occurs when a RibbonControl is clicked.
            </summary>
        </member>
        <member name="F:Fluent.GalleryItem.ClickEvent">
            <summary>
            Identifies the RibbonControl.Click routed event.
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.RaiseClick">
            <summary>
            Raises click event
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.GalleryItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles click event
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.GalleryItem.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItem.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.GalleryItemPlaceholder">
            <summary>
            Represents internal class to use it in
            GalleryPanel as placeholder for GalleryItems
            </summary>
        </member>
        <member name="P:Fluent.GalleryItemPlaceholder.Target">
            <summary>
            Gets the target of the placeholder
            </summary>
        </member>
        <member name="M:Fluent.GalleryItemPlaceholder.#ctor(System.Windows.UIElement)">
            <summary>
            Constructor
            </summary>
            <param name="target">Target</param>
        </member>
        <member name="M:Fluent.GalleryItemPlaceholder.MeasureCore(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryItemPlaceholder.ArrangeCore(System.Windows.Rect)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.GalleryPanel">
            <summary>
            Represents panel for Gallery and InRibbonGallery with grouping and filtering capabilities
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.IsGrouped">
            <summary>
            Gets or sets whether gallery panel shows groups
            (Filter property still works as usual)
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.IsGroupedProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.IsGrouped"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.GroupBy">
            <summary>
            Gets or sets property name to group items
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.GroupByProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.GroupBy"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.GroupByAdvanced">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.GroupByAdvancedProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.GroupByAdvanced"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.ItemContainerGenerator">
            <summary>
            Gets or sets ItemContainerGenerator which generates the
            user interface (UI) on behalf of its host, such as an  ItemsControl.
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.ItemContainerGeneratorProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.ItemContainerGenerator"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of
            all items that are contained within
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.ItemWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.ItemWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of
            all items that are contained within
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.ItemHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.ItemHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.Filter">
            <summary>
            Gets or sets groups names separated by comma which must be shown
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.FilterProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.Filter"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.MinItemsInRow">
            <summary>
            Gets or sets maximum items quantity in row
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.MinItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.MinItemsInRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.GalleryPanel.MaxItemsInRow">
            <summary>
            Gets or sets maximum items quantity in row
            </summary>
        </member>
        <member name="F:Fluent.GalleryPanel.MaxItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.GalleryPanel.MaxItemsInRow"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.GalleryPanel.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Fluent.GalleryPanel.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryPanel.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryPanel.SuspendUpdates">
            <summary>
            Suspends updates.
            </summary>
        </member>
        <member name="M:Fluent.GalleryPanel.ResumeUpdates">
            <summary>
            Resumes updates.
            </summary>
        </member>
        <member name="M:Fluent.GalleryPanel.ResumeUpdatesRefresh">
            <summary>
            Resumes updates and calls <see cref="M:Fluent.GalleryPanel.Refresh"/>.
            </summary>
        </member>
        <member name="M:Fluent.GalleryPanel.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryPanel.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.GalleryPanel.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.GalleryPanel.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.GroupSeparatorMenuItem">
            <summary>
            Represents group separator menu item
            </summary>
        </member>
        <member name="F:Fluent.IconPresenter.IconSizeProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.IconSize"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.SmallSizeProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.SmallSize"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.MediumSizeProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.MediumSize"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.LargeSizeProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.LargeSize"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.CustomSizeProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.CustomSize"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.SmallIconProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.SmallIcon"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.OptimalIconProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.OptimalIcon"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.IconPresenter.CurrentIconSizeSizeProperty">
            <summary>Identifies the <see cref="P:Fluent.IconPresenter.CurrentIconSizeSize"/> dependency property.</summary>
        </member>
        <member name="T:Fluent.InRibbonGallery">
            <summary>
            Represents the In-Ribbon Gallery, a gallery-based control that exposes
            a default subset of items directly in the Ribbon. Any remaining items
            are displayed when a drop-down menu button is clicked
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MinItemsInDropDownRow">
            <summary>
            Min width of the Gallery
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MinItemsInDropDownRowProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MinItemsInDropDownRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxItemsInDropDownRow">
            <summary>
            Max width of the Gallery
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxItemsInDropDownRowProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MaxItemsInDropDownRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.ItemWidth">
            <summary>
            Gets or sets item width
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.ItemWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.ItemWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.ItemHeight">
            <summary>
            Gets or sets item height
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.ItemHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.ItemHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.GroupBy">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.GroupByProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.GroupBy"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.GroupByAdvanced">
            <summary>
            Gets or sets name of property which
            will use to group items in the Gallery.
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.GroupByAdvancedProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.GroupByAdvanced"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Orientation">
            <summary>
            Gets or sets orientation of gallery
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.OrientationProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.Orientation"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Filters">
            <summary>
            Gets collection of filters
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SelectedFilter">
            <summary>
            Gets or sets selected filter
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectedFilterProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.SelectedFilter"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SelectedFilterTitle">
            <summary>
            Gets selected filter title
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectedFilterTitleProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.SelectedFilterTitle"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.SelectedFilterGroups">
            <summary>
            Gets selected filter groups
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectedFilterGroupsProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.SelectedFilterGroups"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.HasFilter">
            <summary>
            Gets whether gallery has selected filter
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.HasFilterProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.HasFilter"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Selectable">
            <summary>
            Gets or sets whether gallery items can be selected
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.SelectableProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.Selectable"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.DropDownPopup">
            <inheritdoc />
        </member>
        <member name="P:Fluent.InRibbonGallery.IsContextMenuOpened">
            <inheritdoc />
        </member>
        <member name="P:Fluent.InRibbonGallery.IsDropDownOpen">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.ResizeModeProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.ResizeMode"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.CanCollapseToButton">
            <summary>
            Gets or sets whether InRibbonGallery
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.CanCollapseToButtonProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.CanCollapseToButton"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsCollapsed">
            <summary>
            Gets whether InRibbonGallery is collapsed to button
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.IsCollapsedProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.IsCollapsed"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.LargeIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsSnapped">
            <summary>
            Snaps / Unsnaps the Visual
            (remove visuals and substitute with freezed image)
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsFrozen">
            <summary>
            Defines whether this item is frozen or not because the copy of this item shown in the <see cref="T:Fluent.QuickAccessToolBar"/> has it's dropdown open.
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.Menu">
            <summary>
            Gets or sets menu to show in combo box bottom
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MenuProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.Menu"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxItemsInRow">
            <summary>
            Gets or sets max count of items in row
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MaxItemsInRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MinItemsInRow">
            <summary>
            Gets or sets min count of items in row
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MinItemsInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MinItemsInRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxDropDownHeight">
            <summary>
            Get or sets max height of drop down popup
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxDropDownHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MaxDropDownHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.MaxDropDownWidth">
            <summary>
            Get or sets max width of drop down popup
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.MaxDropDownWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.MaxDropDownWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.DropDownHeight">
            <summary>
            Gets or sets initial dropdown height
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.DropDownHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.DropDownHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.DropDownWidth">
            <summary>
            Gets or sets initial dropdown width
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.DropDownWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.DropDownWidth"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.GalleryPanelContainerHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.GalleryPanelContainerHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.GalleryPanelContainerHeight">
            <summary>
            Gets or sets the height of the container which hosts the <see cref="T:Fluent.GalleryPanel"/>.
            </summary>
        </member>
        <member name="P:Fluent.InRibbonGallery.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.InRibbonGallery.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="E:Fluent.InRibbonGallery.Scaled">
            <inheritdoc />
        </member>
        <member name="E:Fluent.InRibbonGallery.DropDownOpened">
            <inheritdoc />
        </member>
        <member name="E:Fluent.InRibbonGallery.DropDownClosed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fluent.InRibbonGallery"/> class.
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.InRibbonGallery.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.InRibbonGallery.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.InRibbonGallery.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.InRibbonGallery.ResetScale">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.Enlarge">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.Reduce">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.InRibbonGallery.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.InRibbonGallery.ScrollIntoView(System.Object)">
            <summary>
            Causes the object to scroll into view.  If it is not visible, it is aligned either at the top or bottom of the viewport.
            </summary>
        </member>
        <member name="T:Fluent.KeyTip">
            <summary>
            Represents KeyTip control
            </summary>
        </member>
        <member name="F:Fluent.KeyTip.KeysProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.SetKeys(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets value of attached property Keys for the given element
            </summary>
            <param name="element">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Fluent.KeyTip.GetKeys(System.Windows.DependencyObject)">
            <summary>
            Gets value of the attached property Keys of the given element
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="F:Fluent.KeyTip.AutoPlacementProperty">
            <summary>
            Using a DependencyProperty as the backing store for AutoPlacement.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.SetAutoPlacement(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether key tip placement is auto
            or defined by alignment and margin properties
            </summary>
            <param name="element">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Fluent.KeyTip.GetAutoPlacement(System.Windows.DependencyObject)">
            <summary>
            Gets whether key tip placement is auto
            or defined by alignment and margin properties
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="F:Fluent.KeyTip.HorizontalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for HorizontalAlignment.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.SetHorizontalAlignment(System.Windows.DependencyObject,System.Windows.HorizontalAlignment)">
            <summary>
            Sets Horizontal Alignment of the key tip
            </summary>
            <param name="element">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="M:Fluent.KeyTip.GetHorizontalAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets Horizontal alignment of the key tip
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="M:Fluent.KeyTip.GetVerticalAlignment(System.Windows.DependencyObject)">
            <summary>
            Gets vertical alignment of the key tip
            </summary>
            <param name="element">The given element</param>
        </member>
        <member name="M:Fluent.KeyTip.SetVerticalAlignment(System.Windows.DependencyObject,System.Windows.VerticalAlignment)">
            <summary>
            Sets vertical alignment of the key tip
            </summary>
            <param name="obj">The given element</param>
            <param name="value">Value</param>
        </member>
        <member name="F:Fluent.KeyTip.VerticalAlignmentProperty">
            <summary>
            Using a DependencyProperty as the backing store for VerticalAlignment.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Fluent.KeyTip.GetMargin(System.Windows.DependencyObject)">
            <summary>
            Gets margin of the key tip
            </summary>
            <param name="obj">The key tip</param>
            <returns>Margin</returns>
        </member>
        <member name="M:Fluent.KeyTip.SetMargin(System.Windows.DependencyObject,System.Windows.Thickness)">
            <summary>
            Sets margin of the key tip
            </summary>
            <param name="obj">The key tip</param>
            <param name="value">Value</param>
        </member>
        <member name="F:Fluent.KeyTip.MarginProperty">
            <summary>
            Using a DependencyProperty as the backing store for Margin.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Fluent.MenuItem">
            <summary>
            Represents menu item
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.MenuItem.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.MenuItem.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.MenuItem.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.DropDownPopup">
            <inheritdoc />
        </member>
        <member name="P:Fluent.MenuItem.IsContextMenuOpened">
            <inheritdoc />
        </member>
        <member name="P:Fluent.MenuItem.Description">
            <summary>
            Useless property only used in secon level application menu items
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.DescriptionProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.Description"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.IsDropDownOpen">
            <inheritdoc />
        </member>
        <member name="P:Fluent.MenuItem.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.IsDefinitiveProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.IsDefinitive"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.ResizeMode">
            <summary>
            Gets or sets context menu resize mode
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.ResizeModeProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.ResizeMode"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.MaxDropDownHeight">
            <summary>
            Get or sets max height of drop down popup
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.MaxDropDownHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.MaxDropDownHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.IsSplited">
            <summary>
            Gets or sets a value indicating whether menu item is splited
            </summary>
        </member>
        <member name="F:Fluent.MenuItem.IsSplitedProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.IsSplited"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.MenuItem.GroupName">
            <inheritdoc />
        </member>
        <member name="P:Fluent.MenuItem.Fluent#IToggleButton#IsChecked">
            <inheritdoc />
        </member>
        <member name="F:Fluent.MenuItem.GroupNameProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.GroupName"/> dependency property.</summary>
        </member>
        <member name="E:Fluent.MenuItem.DropDownOpened">
            <inheritdoc />
        </member>
        <member name="E:Fluent.MenuItem.DropDownClosed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fluent.MenuItem"/> class.
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fluent.MenuItem"/> class.
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="F:Fluent.MenuItem.RecognizesAccessKeyProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.RecognizesAccessKey"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.MenuItem.SetRecognizesAccessKey(System.Windows.DependencyObject,System.Boolean)">
            <summary>Helper for setting <see cref="F:Fluent.MenuItem.RecognizesAccessKeyProperty"/> on <paramref name="element"/>.</summary>
            <param name="element"><see cref="T:System.Windows.DependencyObject"/> to set <see cref="F:Fluent.MenuItem.RecognizesAccessKeyProperty"/> on.</param>
            <param name="value">RecognizesAccessKey property value.</param>
        </member>
        <member name="M:Fluent.MenuItem.GetRecognizesAccessKey(System.Windows.DependencyObject)">
            <summary>Helper for getting <see cref="F:Fluent.MenuItem.RecognizesAccessKeyProperty"/> from <paramref name="element"/>.</summary>
            <param name="element"><see cref="T:System.Windows.DependencyObject"/> to read <see cref="F:Fluent.MenuItem.RecognizesAccessKeyProperty"/> from.</param>
            <returns>RecognizesAccessKey property value.</returns>
        </member>
        <member name="P:Fluent.MenuItem.RecognizesAccessKey">
            <summary>
            Defines if access keys should be recognized.
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnQuickAccessOpened(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu opened
            </summary>
        </member>
        <member name="M:Fluent.MenuItem.OnQuickAccessMenuClosedOrUnloaded(System.Object,System.EventArgs)">
            <summary>
            Handles quick access button drop down menu closed
            </summary>
        </member>
        <member name="P:Fluent.MenuItem.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.MenuItem.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.MenuItem.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.MenuItem.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.MenuItem.LogicalParent">
            <summary>
            Returns logical parent; either Parent or ItemsControlFromItemContainer(this).
            </summary>
            <remarks>
            Copied from <see cref="T:System.Windows.Controls.MenuItem"/>.
            </remarks>
        </member>
        <member name="M:Fluent.MenuItem.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnClick">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.MenuItem.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.MenuItem.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.IQuickAccessItemProvider">
            <summary>
            This interface must be implemented for controls
            which are intended to insert to quick access toolbar
            </summary>
        </member>
        <member name="M:Fluent.IQuickAccessItemProvider.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="P:Fluent.IQuickAccessItemProvider.CanAddToQuickAccessToolBar">
            <summary>
            Gets or sets a value indicating whether control can be added to quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.QuickAccessMenuItem">
            <summary>
            Peresents quick access shortcut to another control
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessMenuItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessMenuItem.Target">
            <summary>
            Gets or sets shortcut to the target control
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessMenuItem.TargetProperty">
            <summary>Identifies the <see cref="P:Fluent.QuickAccessMenuItem.Target"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.QuickAccessMenuItem.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.QuickAccessItemsProvider">
            <summary>
            The class responds to mine controls for QuickAccessToolBar
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessItemsProvider.IsSupported(System.Windows.UIElement)">
            <summary>
            Determines whether the given control can provide a quick access toolbar item
            </summary>
            <param name="element">Control</param>
            <returns>True if this control is able to provide
            a quick access toolbar item, false otherwise</returns>
        </member>
        <member name="M:Fluent.QuickAccessItemsProvider.GetQuickAccessItem(System.Windows.UIElement)">
            <summary>
            Gets control which represents quick access toolbar item
            </summary>
            <param name="element">Host control</param>
            <returns>Control which represents quick access toolbar item</returns>
        </member>
        <member name="M:Fluent.QuickAccessItemsProvider.FindSupportedControl(System.Windows.Media.Visual,System.Windows.Point)">
            <summary>
            Finds the top supported control
            </summary>
        </member>
        <member name="T:Fluent.QuickAccessToolBar">
            <summary>
            Represents quick access toolbar
            </summary>
        </member>
        <member name="E:Fluent.QuickAccessToolBar.ItemsChanged">
            <summary>
            Occured when items are added or removed from Quick Access toolbar
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.Items">
            <summary>
            Gets items collection
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.HasOverflowItems">
            <summary>
            Gets whether QuickAccessToolBar has overflow items
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.HasOverflowItemsProperty">
            <summary>Identifies the <see cref="P:Fluent.QuickAccessToolBar.HasOverflowItems"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.QuickAccessItems">
            <summary>
            Gets quick access menu items
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnQuickAccessItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of quick access menu items changes
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.ShowAboveRibbon">
            <summary>
            Gets or sets whether quick access toolbar showes above ribbon
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.ShowAboveRibbonProperty">
            <summary>Identifies the <see cref="P:Fluent.QuickAccessToolBar.ShowAboveRibbon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.CanQuickAccessLocationChanging">
            <summary>
            Gets or sets whether user can change location of QAT
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.CanQuickAccessLocationChangingProperty">
            <summary>Identifies the <see cref="P:Fluent.QuickAccessToolBar.CanQuickAccessLocationChanging"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.IsMenuDropDownVisible">
            <summary>
            Gets or sets whether the Menu-DropDown is visible or not.
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.IsMenuDropDownVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.QuickAccessToolBar.IsMenuDropDownVisible"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnShowBelowClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles show below menu item click
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnShowAboveClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles show above menu item click
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.QuickAccessToolBar.UpdateHasOverflowItems">
            <summary>
            We have to use this function because setting a <see cref="T:System.Windows.DependencyProperty"/> very frequently is quite expensive
            </summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.Refresh">
            <summary>
            First calls <see cref="M:System.Windows.UIElement.InvalidateMeasure"/> and then <see cref="M:Fluent.QuickAccessToolBar.InvalidateMeasureOfTitleBar"/>
            </summary>
        </member>
        <member name="P:Fluent.QuickAccessToolBar.UpdateKeyTipsAction">
            <summary>
            Gets or sets a custom action to generate KeyTips for items in this control.
            </summary>
        </member>
        <member name="F:Fluent.QuickAccessToolBar.UpdateKeyTipsActionProperty">
            <summary>Identifies the <see cref="P:Fluent.QuickAccessToolBar.UpdateKeyTipsAction"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.QuickAccessToolBar.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.QuickAccessToolBar.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.QuickAccessToolBar.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.QuickAccessToolBar.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RadioButton">
            <summary>
            Represents Fluent UI specific RadioButton
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RadioButton.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.LargeIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RadioButton.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.RadioButton.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RadioButton.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RadioButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RadioButton.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RadioButton.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RadioButton.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.RadioButton.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RadioButton.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RadioButton.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RadioButton.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RadioButton.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RadioButton.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RadioButton.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RadioButton.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Ribbon">
            <summary>
            Represents the main Ribbon control which consists of multiple tabs, each of which
            containing groups of controls.  The Ribbon also provides improved context
            menus, enhanced screen tips, and keyboard shortcuts.
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.RibbonStateStorage">
            <summary>
            Gets the current instance for storing the state of this control.
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.CreateRibbonStateStorage">
            <summary>
            Create a new instance for storing the state of this control.
            </summary>
            <returns>Instance of a state storage class.</returns>
        </member>
        <member name="F:Fluent.Ribbon.MinimalVisibleWidth">
            <summary>
            Minimal width of ribbon parent window
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.MinimalVisibleHeight">
            <summary>
            Minimal height of ribbon parent window
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsDefaultContextMenuEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsDefaultContextMenuEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsDefaultContextMenuEnabled">
            <summary>
            Gets or sets whether the default context menu should be enabled/used.
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.RibbonContextMenu">
            <summary>
            Context menu for ribbon in current thread
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Ribbon.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="E:Fluent.Ribbon.SelectedTabChanged">
            <summary>
            Occurs when selected tab has been changed (be aware that SelectedTab can be null)
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.CustomizeTheRibbon">
            <summary>
            Occurs when customize the ribbon
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.CustomizeQuickAccessToolbar">
            <summary>
            Occurs when customize quick access toolbar
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.IsMinimizedChanged">
            <summary>
            Occurs when IsMinimized property is changing
            </summary>
        </member>
        <member name="E:Fluent.Ribbon.IsCollapsedChanged">
            <summary>
            Occurs when IsCollapsed property is changing
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.Menu">
            <summary>
            Gets or sets file menu control (can be application menu button, backstage button and so on)
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.MenuProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.Menu"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.StartScreen">
            <summary>
            Property for defining the start screen.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.StartScreenProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.StartScreen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.QuickAccessToolBar">
            <summary>
            Property for defining the QuickAccessToolBar.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.QuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.QuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.TabControl">
            <summary>
            Property for defining the TabControl.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.TabControlProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.TabControl"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.SelectedTabItem">
            <summary>
            Gets or sets selected tab item
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.SelectedTabItemProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.SelectedTabItem"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.SelectedTabIndex">
            <summary>
            Gets or sets selected tab index
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.SelectedTabIndexProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.SelectedTabIndex"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.FirstVisibleItem">
            <summary>
            Gets the first visible TabItem
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.LastVisibleItem">
            <summary>
            Gets the last visible TabItem
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.QuickAccessElements">
            <summary>
            Gets currently active quick access elements.
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.GetQuickAccessElements">
            <summary>
            Gets a copy of currently active quick access elements.
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.TitleBar">
            <summary>
            Gets ribbon titlebar
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.TitleBarProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.TitleBar"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.ShowQuickAccessToolBarAboveRibbon">
            <summary>
            Gets or sets whether quick access toolbar showes above ribbon
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ShowQuickAccessToolBarAboveRibbonProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.ShowQuickAccessToolBarAboveRibbon"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.Ribbon.OnShowQuickAccessToolBarAboveRibbonChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles ShowQuickAccessToolBarAboveRibbon property changed
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.Ribbon.QuickAccessToolBarHeight">
            <summary>
            Gets or sets the height which is used to render the window title.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.QuickAccessToolBarHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.QuickAccessToolBarHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.ContextualGroups">
            <summary>
            Gets collection of contextual tab groups
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.Tabs">
            <summary>
            gets collection of ribbon tabs
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnTabItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of ribbon tab items changes
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.Ribbon.ToolBarItems">
            <summary>
            Gets collection of toolbar items
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.QuickAccessItems">
            <summary>
            Gets collection of quick access menu items
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnQuickAccessItemsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles collection of quick access menu items changes
            </summary>
            <param name="sender">Sender</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.Ribbon.CanCustomizeQuickAccessToolBar">
            <summary>
            Gets or sets whether Customize Quick Access Toolbar menu item is shown
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanCustomizeQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.CanCustomizeQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.CanCustomizeQuickAccessToolBarItems">
            <summary>
            Gets or sets whether items can be added or removed from the quick access toolbar by users.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanCustomizeQuickAccessToolBarItemsProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.CanCustomizeQuickAccessToolBarItems"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsQuickAccessToolBarMenuDropDownVisible">
            <summary>
            Gets or sets whether the QAT Menu-DropDown is visible or not.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsQuickAccessToolBarMenuDropDownVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsQuickAccessToolBarMenuDropDownVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.CanCustomizeRibbon">
            <summary>
            Gets or sets whether Customize Ribbon menu item is shown
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanCustomizeRibbonProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.CanCustomizeRibbon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.CanMinimize">
            <summary>
            Gets or sets whether ribbon can be minimized
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.IsMinimized">
            <summary>
            Gets or sets whether ribbon is minimized
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsMinimizedProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsMinimized"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.Ribbon.CanMinimizeProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.CanMinimize"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.CanUseSimplified">
            <summary>
            Gets or sets whether ribbon can be switched
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanUseSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.CanUseSimplified"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.ContentGapHeight">
            <summary>
            Gets or sets the height of the gap between the ribbon and the regular window content
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ContentGapHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.ContentGapHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.ContentHeight">
            <summary>
            Gets or sets the height of the ribbon content area
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ContentHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.ContentHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsCollapsed">
            <summary>
            Gets whether ribbon is collapsed
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsCollapsedProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsCollapsed"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsAutomaticCollapseEnabled">
            <summary>
            Defines if the Ribbon should automatically set <see cref="P:Fluent.Ribbon.IsCollapsed"/> when the width or height of the owner window drop under <see cref="F:Fluent.Ribbon.MinimalVisibleWidth"/> or <see cref="F:Fluent.Ribbon.MinimalVisibleHeight"/>
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsAutomaticCollapseEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsAutomaticCollapseEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsQuickAccessToolBarVisible">
            <summary>
            Gets or sets whether QAT is visible
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsQuickAccessToolBarVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsQuickAccessToolBarVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.CanQuickAccessLocationChanging">
            <summary>
            Gets or sets whether user can change location of QAT
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CanQuickAccessLocationChangingProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.CanQuickAccessLocationChanging"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.Ribbon.AreTabHeadersVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.AreTabHeadersVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.AreTabHeadersVisible">
            <summary>
            Defines whether tab headers are visible or not.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsToolBarVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsToolBarVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsToolBarVisible">
            <summary>
            Defines whether tab headers are visible or not.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsMouseWheelScrollingEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsMouseWheelScrollingEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsMouseWheelScrollingEnabled">
            <summary>
            Defines whether scrolling by mouse wheel is enabled or not.
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.AreAnyKeyTipsVisible">
            <summary>
            Checks if any keytips are visible.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.IsKeyTipHandlingEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.IsKeyTipHandlingEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Ribbon.IsKeyTipHandlingEnabled">
            <summary>
            Defines whether handling of key tips is enabled or not.
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.KeyTipKeys">
            <summary>
            Defines the keys that are used to activate the key tips.
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.AddToQuickAccessCommand">
            <summary>
            Gets add to quick access toolbar command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.RemoveFromQuickAccessCommand">
            <summary>
            Gets remove from quick access command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ShowQuickAccessAboveCommand">
            <summary>
            Gets show quick access above command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ShowQuickAccessBelowCommand">
            <summary>
            Gets show quick access below command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.ToggleMinimizeTheRibbonCommand">
            <summary>
            Gets toggle ribbon minimize command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.SwitchToTheClassicRibbonCommand">
            <summary>
            Gets Switch to classic ribbon command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.SwitchToTheSimplifiedRibbonCommand">
            <summary>
            Gets Switch to simplified ribbon command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CustomizeQuickAccessToolbarCommand">
            <summary>
            Gets customize quick access toolbar command
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.CustomizeTheRibbonCommand">
            <summary>
            Gets customize the ribbon command
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fluent.Ribbon"/> class.
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Ribbon.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Ribbon.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Ribbon.OnOwnerWindowClosed(System.Object,System.EventArgs)">
            <summary>
            Called when the <see cref="F:Fluent.Ribbon.ownerWindow"/> is closed, so that we set it to null.
            </summary>
        </member>
        <member name="M:Fluent.Ribbon.IsInQuickAccessToolBar(System.Windows.UIElement)">
            <summary>
            Determines whether the given element is in quick access toolbar
            </summary>
            <param name="element">Element</param>
            <returns>True if element in quick access toolbar</returns>
        </member>
        <member name="M:Fluent.Ribbon.AddToQuickAccessToolBar(System.Windows.UIElement)">
            <summary>
            Adds the given element to quick access toolbar
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="M:Fluent.Ribbon.RemoveFromQuickAccessToolBar(System.Windows.UIElement)">
            <summary>
            Removes the given elements from quick access toolbar
            </summary>
            <param name="element">Element</param>
        </member>
        <member name="M:Fluent.Ribbon.ClearQuickAccessToolBar">
            <summary>
            Clears quick access toolbar
            </summary>
        </member>
        <member name="P:Fluent.Ribbon.AutomaticStateManagement">
            <summary>
            Gets or sets whether Quick Access ToolBar can
            save and load its state automatically
            </summary>
        </member>
        <member name="F:Fluent.Ribbon.AutomaticStateManagementProperty">
            <summary>Identifies the <see cref="P:Fluent.Ribbon.AutomaticStateManagement"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.Ribbon.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Ribbon.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Ribbon.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonContextualGroupsContainer">
            <summary>
            Represents contextual groups container
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualGroupsContainer.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonContextualGroupsContainer.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonContextualTabGroup">
            <summary>
            Represents contextual tab group
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.TabItemSelectedForegroundProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonContextualTabGroup.TabItemSelectedForeground"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.TabItemSelectedForeground">
            <summary>
            Gets or sets the foreground brush to be used for a selected <see cref="T:Fluent.RibbonTabItem"/> belonging to this group.
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.TabItemMouseOverForegroundProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonContextualTabGroup.TabItemMouseOverForeground"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.TabItemMouseOverForeground">
            <summary>
            Gets or sets the foreground brush to be used when the mouse is over a <see cref="T:Fluent.RibbonTabItem"/> belonging to this group.
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.TabItemSelectedMouseOverForegroundProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonContextualTabGroup.TabItemSelectedMouseOverForeground"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.TabItemSelectedMouseOverForeground">
            <summary>
            Gets or sets the foreground brush to be used when the mouse is over a selected <see cref="T:Fluent.RibbonTabItem"/> belonging to this group.
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.Header">
            <summary>
            Gets or sets group header
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonContextualTabGroup.Header"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnHeaderChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles header chages
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data.</param>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.Items">
            <summary>
            Gets collection of tab items
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.InnerVisibility">
            <summary>
            Gets or sets the visibility this group for internal use (this enables us to hide this group when all items in this group are hidden)
            </summary>
        </member>
        <member name="F:Fluent.RibbonContextualTabGroup.InnerVisibilityProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonContextualTabGroup.InnerVisibility"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.FirstVisibleItem">
            <summary>
            Gets the first visible TabItem in this group
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.FirstVisibleAndEnabledItem">
            <summary>
            Gets the first visible TabItem in this group
            </summary>
        </member>
        <member name="P:Fluent.RibbonContextualTabGroup.LastVisibleItem">
            <summary>
            Gets the last visible TabItem in this group
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnVisibilityChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles visibility prioperty changed
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.AppendTabItem(Fluent.RibbonTabItem)">
            <summary>
            Appends tab item
            </summary>
            <param name="item">Ribbon tab item</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.RemoveTabItem(Fluent.RibbonTabItem)">
            <summary>
            Removes tab item
            </summary>
            <param name="item">Ribbon tab item</param>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.UpdateInnerVisiblityAndGroupBorders">
            <summary>
            Updates the group border
            </summary>
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonContextualTabGroup.UpdateInnerVisibility">
            <summary>
            Updates the Visibility of the inner container
            </summary>
        </member>
        <member name="T:Fluent.RibbonControl">
            <summary>
            Represent base class for Fluent controls
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonControl.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonControl.Command">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonControl.CommandParameter">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonControl.CommandTarget">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.CommandParameterProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.CommandParameter"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonControl.CommandProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.Command"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonControl.CommandTargetProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.CommandTarget"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnCommandChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles Command changed
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnCommandCanExecuteChanged(System.Object,System.EventArgs)">
            <summary>
            Handles Command CanExecute changed
            </summary>
        </member>
        <member name="P:Fluent.RibbonControl.IsEnabledCore">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonControl.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonControl.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControl.BindQuickAccessItem(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Binds default properties of control to quick access element
            </summary>
            <param name="source">Source item</param>
            <param name="element">Toolbar item</param>
        </member>
        <member name="P:Fluent.RibbonControl.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonControl.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonControl.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnCanAddToQuickAccessToolBarChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Occurs then CanAddToQuickAccessToolBar property changed
            </summary>
        </member>
        <member name="M:Fluent.RibbonControl.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControl.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControl.GetControlWorkArea(System.Windows.FrameworkElement)">
            <summary>
            Returns screen workarea in witch control is placed
            </summary>
            <param name="control">Control</param>
            <returns>Workarea in witch control is placed</returns>
        </member>
        <member name="M:Fluent.RibbonControl.GetControlMonitor(System.Windows.FrameworkElement)">
            <summary>
            Returns monitor in witch control is placed
            </summary>
            <param name="control">Control</param>
            <returns>Workarea in witch control is placed</returns>
        </member>
        <member name="M:Fluent.RibbonControl.GetParentRibbon(System.Windows.DependencyObject)">
            <summary>
            Get the parent <see cref="T:Fluent.Ribbon"/>.
            </summary>
            <returns>The found <see cref="T:Fluent.Ribbon"/> or <c>null</c> of no parent <see cref="T:Fluent.Ribbon"/> could be found.</returns>
        </member>
        <member name="M:Fluent.RibbonControl.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControl.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonControl.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControl.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonGroupBox">
            <summary>
            RibbonGroup represents a logical group of controls as they appear on
            a RibbonTab.  These groups can resize its content
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.HeaderContentControl">
            <summary>
            Get the <see cref="T:System.Windows.Controls.ContentControl"/> responsible for rendering the header.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.CollapsedHeaderContentControl">
            <summary>
            Get the <see cref="T:System.Windows.Controls.ContentControl"/> responsible for rendering the header when <see cref="P:Fluent.RibbonGroupBox.State"/> is equal to <see cref="F:Fluent.RibbonGroupBoxState.Collapsed"/>.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonGroupBox.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsCollapsedHeaderContentPresenterProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for IsCollapsedHeaderContentPresenter.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.SetIsCollapsedHeaderContentPresenter(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of <see cref="F:Fluent.RibbonGroupBox.IsCollapsedHeaderContentPresenterProperty"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.GetIsCollapsedHeaderContentPresenter(System.Windows.DependencyObject)">
            <summary>
            Gets the value of <see cref="F:Fluent.RibbonGroupBox.IsCollapsedHeaderContentPresenterProperty"/>.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.DropDownPopup">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsContextMenuOpened">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupBox.StateDefinition">
            <summary>
            Gets or sets the state transition for full mode
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.StateDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.StateDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.SimplifiedStateDefinition">
            <summary>
            Gets or sets the state transition for simplified mode
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.SimplifiedStateDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.SimplifiedStateDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.State">
            <summary>
            Gets or sets the current state of the group
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.StateProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.State"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnStateChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            On state property changed
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.RibbonGroupBox.Scale">
            <summary>
            Gets or sets scale index (for internal IRibbonScalableControl)
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.CacheResetGuard">
            <summary>
            Gets or sets whether to reset cache when scalable control is scaled
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsLauncherVisible">
            <summary>
            Gets or sets dialog launcher button visibility
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsLauncherVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.IsLauncherVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherKeys">
            <summary>
            Gets or sets key tip for dialog launcher button
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherKeysProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherKeys"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherIcon">
            <summary>
            Gets or sets launcher button icon
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherIconProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherText">
            <summary>
            Gets or sets launcher button text
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherTextProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherText"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherCommand">
            <summary>
            Gets or sets the command to invoke when this button is pressed. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherCommandParameter">
            <summary>
            Gets or sets the parameter to pass to the System.Windows.Controls.Primitives.ButtonBase.Command property. This is a dependency property.
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherCommandTarget">
            <summary>
            Gets or sets the element on which to raise the specified command. This is a dependency property.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherCommandParameterProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherCommandParameter"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherCommandProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherCommand"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherCommandTargetProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherCommandTarget"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherToolTip">
            <summary>
            Gets or sets launcher button tooltip
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherToolTipProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherToolTip"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsLauncherEnabled">
            <summary>
            Gets or sets whether launcher button is enabled
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsLauncherEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.IsLauncherEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.LauncherButton">
            <summary>
            Gets launcher button
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.LauncherButtonProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.LauncherButton"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsDropDownOpen">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.Icon">
            <summary>
            Gets or sets icon
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonGroupBox.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsSeparatorVisible">
            <summary>
            Gets or sets whether the groupbox shows a separator.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsSeparatorVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.IsSeparatorVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBox.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnIsSimplifiedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:Fluent.RibbonGroupBox.IsSimplified"/> changes.
            </summary>
        </member>
        <member name="E:Fluent.RibbonGroupBox.LauncherClick">
            <summary>
            Dialog launcher btton click event
            </summary>
        </member>
        <member name="E:Fluent.RibbonGroupBox.DropDownOpened">
            <inheritdoc />
        </member>
        <member name="E:Fluent.RibbonGroupBox.DropDownClosed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fluent.RibbonGroupBox"/> class.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.GetPanel">
            <summary>
            Gets a panel with items
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.RibbonGroupBox.GetLayoutRoot">
            <summary>
            Gets cmmon layout root for popup and groupbox
            </summary>
            <returns></returns>
        </member>
        <member name="P:Fluent.RibbonGroupBox.IsSnapped">
            <summary>
            Snaps / Unsnaps the Visual
            (remove visuals and substitute with freezed image)
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.StateIntermediate">
            <summary>
            Gets or sets intermediate state of the group box
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.ScaleIntermediate">
            <summary>
            Gets or sets intermediate scale of the group box
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBox.DesiredSizeIntermediate">
            <summary>
            Gets intermediate desired size
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.TryClearCacheAndResetStateAndScaleAndNotifyParentRibbonGroupsContainer">
            <summary>
            Tries to clear the cache, reset the state and reset the scale.
            If that succeeds the parent <see cref="T:Fluent.RibbonGroupsContainer"/> is notified about that.
            </summary>
            <returns><c>true</c> if the cache was reset. Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Fluent.RibbonGroupBox.ClearCache">
            <summary>
            Clears cache
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.InvalidateLayout">
            <summary>
            Invalidates layout (with children)
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnChildDesiredSizeChanged(System.Windows.UIElement)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnDialogLauncherButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Dialog launcher button click handler
            </summary>
            <param name="sender">Sender</param>
            <param name="e">the event data</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnIsDropDownOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles IsOpen propertyu changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonGroupBox.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupBox.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonGroupBox.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBox.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupBox.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBox.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonGroupBoxWrapPanel">
            <summary>
            Special wrap panel for <see cref="T:Fluent.RibbonGroupBox"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxWrapPanel.SharedSizeGroupNameProperty">
            <summary>
            Attached <see cref="T:System.Windows.DependencyProperty"/> for <c>SharedSizeGroupName</c>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.SetSharedSizeGroupName(System.Windows.DependencyObject,System.String)">
            <summary>
            Sets <see cref="F:Fluent.RibbonGroupBoxWrapPanel.SharedSizeGroupNameProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.GetSharedSizeGroupName(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonGroupBoxWrapPanel.SharedSizeGroupNameProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxWrapPanel.ExcludeFromSharedSizeProperty">
            <summary>
            Attached <see cref="T:System.Windows.DependencyProperty"/> for <c>SharedSizeGroupName</c>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.SetExcludeFromSharedSize(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets <see cref="F:Fluent.RibbonGroupBoxWrapPanel.ExcludeFromSharedSizeProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.GetExcludeFromSharedSize(System.Windows.DependencyObject)">
            <summary>
            Gets <see cref="F:Fluent.RibbonGroupBoxWrapPanel.ExcludeFromSharedSizeProperty"/> for <paramref name="element"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxWrapPanel.ItemWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBoxWrapPanel.ItemWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBoxWrapPanel.ItemWidth">
            <summary>
            The ItemWidth and ItemHeight properties specify the size of all items in the WrapPanel.
            Note that children of
            WrapPanel may have their own Width/Height properties set - the ItemWidth/ItemHeight
            specifies the size of "layout partition" reserved by WrapPanel for the child.
            If this property is not set (or set to "Auto" in markup or Double.NaN in code) - the size of layout
            partition is equal to DesiredSize of the child element.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxWrapPanel.ItemHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBoxWrapPanel.ItemHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBoxWrapPanel.ItemHeight">
            <summary>
            The ItemWidth and ItemHeight properties specify the size of all items in the WrapPanel.
            Note that children of
            WrapPanel may have their own Width/Height properties set - the ItemWidth/ItemHeight
            specifies the size of "layout partition" reserved by WrapPanel for the child.
            If this property is not set (or set to "Auto" in markup or Double.NaN in code) - the size of layout
            partition is equal to DesiredSize of the child element.
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxWrapPanel.OrientationProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupBoxWrapPanel.Orientation"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonGroupBoxWrapPanel.Orientation">
            <summary>
            Specifies dimension of children positioning in absence of wrapping.
            Wrapping occurs in orthogonal direction. For example, if Orientation is Horizontal,
            the items try to form horizontal rows first and if needed are wrapped and form vertical stack of rows.
            If Orientation is Vertical, items first positioned in a vertical column, and if there is
            not enough space - wrapping creates additional columns in horizontal dimension.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            <see cref="P:System.Windows.PropertyMetadata.PropertyChangedCallback"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBoxWrapPanel.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonGroupsContainer">
            <summary>
            Represent panel with ribbon group.
            It is automatically adjusting size of controls
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ReduceOrder">
            <summary>
            Gets or sets reduce order of group in the ribbon panel.
            It must be enumerated with comma from the first to reduce to
            the last to reduce (use Control.Name as group name in the enum).
            Enclose in parentheses as (Control.Name) to reduce/enlarge
            scalable elements in the given group
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupsContainer.ReduceOrderProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonGroupsContainer.ReduceOrder"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.CreateUIElementCollection(System.Windows.FrameworkElement)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ScrollOwner">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.SetHorizontalOffset(System.Double)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ExtentWidth">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.HorizontalOffset">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ViewportWidth">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineLeft">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineRight">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelLeft">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelRight">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.MouseWheelUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.LineUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageLeft">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageRight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.PageUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainer.SetVerticalOffset(System.Double)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.CanVerticallyScroll">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.CanHorizontallyScroll">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ExtentHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.VerticalOffset">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupsContainer.ViewportHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:Fluent.RibbonGroupsContainerScrollViewer">
            <summary>
            Represents a <see cref="T:System.Windows.Controls.ScrollViewer" /> specific to <see cref="T:Fluent.RibbonGroupsContainer" />.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupsContainerScrollViewer.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonMenu">
            <summary>
            Represents menu in combo box and gallery
            </summary>
        </member>
        <member name="M:Fluent.RibbonMenu.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonMenu.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonScrollViewer">
            <summary>
            Represents <see cref="T:System.Windows.Controls.ScrollViewer"/> with modified hit test
            </summary>
        </member>
        <member name="M:Fluent.RibbonScrollViewer.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonScrollViewer.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonTabControl">
            <summary>
            Represents ribbon tab control
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.DefaultContentGapHeight">
            <summary>
            Default value for <see cref="P:Fluent.RibbonTabControl.ContentGapHeight"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.DefaultContentHeight">
            <summary>
            Default value for <see cref="P:Fluent.RibbonTabControl.ContentHeight"/>.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.AdditionalPopupSpaceForKeyTips">
            <summary>
            Provides a value needed to add space to the popup to accomodate for overlapping keytips.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.AdditionalPopupSpaceForKeyTipsGridLength">
            <summary>
            Provides a value needed to add space to the popup to accomodate for overlapping keytips.
            </summary>
        </member>
        <member name="E:Fluent.RibbonTabControl.RequestBackstageClose">
            <summary>
            Event which is fired when the, maybe listening, <see cref="T:Fluent.Backstage"/> should be closed
            </summary>
        </member>
        <member name="E:Fluent.RibbonTabControl.DropDownOpened">
            <inheritdoc />
        </member>
        <member name="E:Fluent.RibbonTabControl.DropDownClosed">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabControl.Menu">
            <summary>
            Gets or sets file menu control (can be application menu button, backstage button and so on)
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.MenuProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.Menu"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.DropDownPopup">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabControl.TabsContainer">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.Panel"/> responsible for displaying the selected tabs content.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.SelectedContentPresenter">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.ContentPresenter"/> responsible for displaying the selected tabs content.
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsContextMenuOpened">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabControl.SelectedContent">
            <summary>
            Gets content of selected tab item
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.SelectedContentProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.SelectedContent"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsMinimized">
            <summary>
            Gets or sets whether ribbon is minimized
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.IsMinimizedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.IsMinimized"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.CanMinimize">
            <summary>
            Gets or sets whether ribbon can be minimized
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.CanMinimizeProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.CanMinimize"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsSimplified">
            <summary>
            Gets or sets whether ribbon is simplified
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.CanUseSimplified">
            <summary>
            Gets or sets whether ribbon can be switched simplified
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.CanUseSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.CanUseSimplified"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsDropDownOpen">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonTabControl.IsDropDownOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.IsDropDownOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.HighlightSelectedItem">
            <summary>
            Defines if the currently selected item should draw it's highlight/selected borders
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.HighlightSelectedItemProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.HighlightSelectedItem"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.CanScroll">
            <summary>
            Gets whether ribbon tabs can scroll
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.SelectedTabItem">
            <summary>
            Gets or sets selected tab item
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.SelectedTabItemProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.SelectedTabItem"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.ToolBarItems">
            <summary>
            Gets collection of ribbon toolbar items
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.ContentHeight">
            <summary>
            Gets or sets the height of the content area.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.ContentHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.ContentHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.ContentGapHeight">
            <summary>
            Gets or sets the height of the gap between the ribbon and the content
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.ContentGapHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.ContentGapHeight"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.AreTabHeadersVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.AreTabHeadersVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.AreTabHeadersVisible">
            <summary>
            Defines whether tab headers are visible or not.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.IsToolBarVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.IsToolBarVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsToolBarVisible">
            <summary>
            Defines whether tab headers are visible or not.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabControl.IsMouseWheelScrollingEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabControl.IsMouseWheelScrollingEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabControl.IsMouseWheelScrollingEnabled">
            <summary>
            Defines whether scrolling by mouse wheel is enabled or not.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fluent.RibbonTabControl"/> class.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fluent.RibbonTabControl"/> class.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.SelectFirstTab">
            <summary>
            Selects the first tab if <see cref="P:Fluent.RibbonTabControl.IsMinimized"/> is <c>false</c>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.CustomPopupPlacementMethod(System.Windows.Size,System.Windows.Size,System.Windows.Point)">
            <summary>
            Implements custom placement for ribbon popup
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.RaiseRequestBackstageClose">
            <summary>
            Raises an event causing the Backstage-View to be closed
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.GetFirstVisibleItem">
            <summary>
            Gets the first visible item
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.GetFirstVisibleAndEnabledItem">
            <summary>
            Gets the first visible and enabled item
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabControl.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabControl.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabControl.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonTabItem">
            <summary>
            Represents ribbon tab item
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.ActiveTabBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> which is used to render the background if this <see cref="T:Fluent.RibbonTabItem"/> is the currently active/selected one.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.ActiveTabBackgroundProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.ActiveTabBackground"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.ActiveTabBorderBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> which is used to render the border if this <see cref="T:Fluent.RibbonTabItem"/> is the currently active/selected one.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.ActiveTabBorderBrushProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.ActiveTabBorderBrush"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonTabItem.KeyTipProperty">
            <summary>
            Using a DependencyProperty as the backing store for Keys.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.GroupsContainer">
            <summary>
            Gets ribbon groups container
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsMinimized">
            <summary>
            Gets or sets whether ribbon is minimized
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsMinimizedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.IsMinimized"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsOpen">
            <summary>
            Gets or sets whether ribbon is opened
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsOpenProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.IsOpen"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.ReduceOrder">
            <summary>
            Gets or sets reduce order
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsContextual">
            <summary>
            Gets or sets whether tab item is contextual
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsContextualProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.IsContextual"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsSelected">
            <summary>
            Gets or sets whether tab item is selected
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsSelectedProperty">
            <summary>
            Using a DependencyProperty as the backing store for IsSelected.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.TabControlParent">
            <summary>
            Gets ribbon tab control parent
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.HeaderPadding">
            <summary>
            Gets or sets the padding for the header.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HeaderPaddingProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.HeaderPadding"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsSeparatorVisible">
            <summary>
            Gets or sets whether separator is visible
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsSeparatorVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.IsSeparatorVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Group">
            <summary>
            Gets or sets ribbon contextual tab group
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.GroupProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.Group"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.DesiredWidth">
            <summary>
            Gets or sets desired width of the tab item.
            </summary>
            <remarks>This is needed in case the width of <see cref="P:Fluent.RibbonTabItem.Group"/> is larger than it's tabs.</remarks>
        </member>
        <member name="P:Fluent.RibbonTabItem.HasLeftGroupBorder">
            <summary>
            Gets or sets whether tab item has left group border
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HasLeftGroupBorderProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.HasLeftGroupBorder"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.HasRightGroupBorder">
            <summary>
            Gets or sets whether tab item has right group border
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HasRightGroupBorderProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.HasRightGroupBorder"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Groups">
            <summary>
            get collection of ribbon groups
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonTabItem.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.HeaderTemplate">
            <summary>
            Gets or sets header template of tab item.
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.HeaderTemplateProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.HeaderTemplate"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnFocusableChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles Focusable changes
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.CoerceFocusable(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces Focusable
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabItem.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.RibbonTabItem.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTabItem.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabItem.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Handles selected
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            handles unselected
            </summary>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.RibbonTabItem.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabItem.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabItem.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonTabsContainer">
            <summary>
            Represent panel with ribbon tab items.
            It is automatically adjusting size of tabs
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fluent.RibbonTabsContainer"/> class.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.UpdateSeparators(System.Boolean,System.Boolean)">
            <summary>
            Updates separator visibility
            </summary>
            <param name="regularTabs">If this parameter true, regular tabs will have separators</param>
            <param name="contextualTabs">If this parameter true, contextual tabs will have separators</param>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ScrollOwner">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.SetHorizontalOffset(System.Double)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ExtentWidth">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabsContainer.HorizontalOffset">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ViewportWidth">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineLeft">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineRight">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelLeft">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelRight">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.MouseWheelUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.LineUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageDown">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageLeft">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageRight">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTabsContainer.PageUp">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="M:Fluent.RibbonTabsContainer.SetVerticalOffset(System.Double)">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.CanVerticallyScroll">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabsContainer.CanHorizontallyScroll">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ExtentHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.VerticalOffset">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="P:Fluent.RibbonTabsContainer.ViewportHeight">
            <summary>
            Not implemented
            </summary>
        </member>
        <member name="T:Fluent.ScrollData">
            <summary>
            Helper class to hold scrolling data.
            This class exists to reduce working set when SCP is delegating to another implementation of ISI.
            Standard "extra pointer always for less data sometimes" cache savings model:
            </summary>
        </member>
        <member name="P:Fluent.ScrollData.ScrollOwner">
            <summary>
            Scroll viewer
            </summary>
        </member>
        <member name="P:Fluent.ScrollData.OffsetX">
            <summary>
            Scroll offset
            </summary>
        </member>
        <member name="P:Fluent.ScrollData.ViewportWidth">
            <summary>
            ViewportSize is computed from our FinalSize, but may be in different units.
            </summary>
        </member>
        <member name="P:Fluent.ScrollData.ExtentWidth">
            <summary>
            Extent is the total size of our content.
            </summary>
        </member>
        <member name="T:Fluent.RibbonTitleBar">
            <summary>
            Represents title bar
            </summary>
        </member>
        <member name="P:Fluent.RibbonTitleBar.QuickAccessToolBar">
            <summary>
            Gets or sets quick access toolbar
            </summary>
        </member>
        <member name="F:Fluent.RibbonTitleBar.QuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTitleBar.QuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTitleBar.HeaderAlignment">
            <summary>
            Gets or sets header alignment
            </summary>
        </member>
        <member name="F:Fluent.RibbonTitleBar.HeaderAlignmentProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTitleBar.HeaderAlignment"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTitleBar.IsCollapsed">
            <summary>
            Defines whether title bar is collapsed
            </summary>
        </member>
        <member name="F:Fluent.RibbonTitleBar.IsCollapsedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTitleBar.IsCollapsed"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonTitleBar.HideContextTabsProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonTitleBar.HideContextTabs"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonTitleBar.HideContextTabs">
            <summary>
             Gets or sets whether context tabs are hidden.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.HitTestCore(System.Windows.Media.PointHitTestParameters)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonTitleBar.EnsureCorrectLayoutAfterArrange">
            <summary>
            Sometimes the relative position only changes after the arrange phase.
            To compensate such sitiations we issue a second layout pass by invalidating our measure.
            This situation can occur if, for example, the icon of a ribbon window has it's visibility changed.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.ScheduleForceMeasureAndArrange">
            <summary>
            Schedules a call to <see cref="M:Fluent.Extensions.FrameworkElementExtensions.ForceMeasureAndArrange(System.Windows.FrameworkElement)"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonTitleBar.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonToolBar">
            <summary>
            Represent panel for group box panel
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.SeparatorStyle">
            <summary>
            Gets or sets style for the separator
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBar.SeparatorStyleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBar.SeparatorStyle"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBar.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBar.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonToolBar.OnIsSimplifiedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="P:Fluent.RibbonToolBar.IsSimplified"/> changes.
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.Children">
            <summary>
            Gets children
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.LayoutDefinitions">
            <summary>
            Gets particular rules  for layout in this group box panel
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBar.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBar.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonToolBar.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBar.GetCurrentLayoutDefinition">
            <summary>
            Gets current used layout definition (or null if no present definitions)
            </summary>
            <returns>Layout definition or null</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBar.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBar.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBar.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBar.WrapPanelLayuot(System.Windows.Size,System.Boolean)">
            <summary>
            Unified method for wrap panel logic
            </summary>
            <param name="availableSize">Available or final size</param>
            <param name="measure">Pass true if measure required; pass false if arrange required</param>
            <returns>Final size</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.CustomLayout(Fluent.RibbonToolBarLayoutDefinition,System.Windows.Size,System.Boolean,System.Boolean)">
            <summary>
            Layout logic for the given layout definition
            </summary>
            <param name="layoutDefinition">Current layout definition</param>
            <param name="availableSize">Available or final size</param>
            <param name="measure">Pass true if measure required; pass false if arrange required</param>
            <param name="addchildren">Determines whether we have to add children to the logical and visual tree</param>
            <returns>Final size</returns>
        </member>
        <member name="M:Fluent.RibbonToolBar.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonToolBarControlDefinition">
            <summary>
            Represent logical definition for a control in toolbar
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBarControlDefinition.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.Size">
            <summary>
            Gets or sets Size for the element.
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarControlDefinition.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element.
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarControlDefinition.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.Target">
            <summary>
            Gets or sets name of the target control
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.TargetProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarControlDefinition.Target"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlDefinition.Width">
            <summary>
            Gets or sets width of the target control
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlDefinition.WidthProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarControlDefinition.Width"/> dependency property.</summary>
        </member>
        <member name="E:Fluent.RibbonToolBarControlDefinition.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonToolBarControlDefinition.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonToolBarControlGroup">
            <summary>
            Represent logical container for toolbar items
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlGroup.IsFirstInRow">
            <summary>
            Gets whether the group is the fisrt control in the row
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlGroup.IsFirstInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarControlGroup.IsFirstInRow"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlGroup.IsLastInRow">
            <summary>
            Gets whether the group is the last control in the row
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarControlGroup.IsLastInRowProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarControlGroup.IsLastInRow"/> dependency property.</summary>
        </member>
        <member name="T:Fluent.RibbonToolBarControlGroupDefinition">
            <summary>
            Represent logical container for toolbar items
            </summary>
        </member>
        <member name="E:Fluent.RibbonToolBarControlGroupDefinition.ChildrenChanged">
            <summary>
            Occures when children has been changed
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarControlGroupDefinition.Children">
            <summary>
            Gets rows
            </summary>
        </member>
        <member name="M:Fluent.RibbonToolBarControlGroupDefinition.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Fluent.RibbonToolBarLayoutDefinition">
            <summary>
            Represents size definition for group box
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.Size">
            <summary>
            Gets or sets Size for the element.
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarLayoutDefinition.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarLayoutDefinition.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element.
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarLayoutDefinition.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarLayoutDefinition.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.RowCount">
            <summary>
            Gets or sets count of rows in the ribbon toolbar
            </summary>
        </member>
        <member name="F:Fluent.RibbonToolBarLayoutDefinition.RowCountProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarLayoutDefinition.RowCount"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonToolBarLayoutDefinition.ForSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonToolBarLayoutDefinition.ForSimplified"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.ForSimplified">
            <summary>
            Gets or sets wether the layout definition should be used in simplified state.
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarLayoutDefinition.Rows">
            <summary>
            Gets rows
            </summary>
        </member>
        <member name="T:Fluent.RibbonToolBarRow">
            <summary>
            Represents size definition for group box
            </summary>
        </member>
        <member name="P:Fluent.RibbonToolBarRow.Children">
            <summary>
            Gets rows
            </summary>
        </member>
        <member name="T:Fluent.RibbonWindow">
            <summary>
            Represents basic window for ribbon
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.TitleBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.RibbonWindow.TitleBarProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.TitleBar"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.TitleBarHeight">
            <summary>
            Gets or sets the height which is used to render the window title.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.TitleBarHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.TitleBarHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.TitleForeground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> which is used to render the window title.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.TitleForegroundProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.TitleForeground"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.TitleBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> which is used to render the window title background.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.TitleBackgroundProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.TitleBackground"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonWindow.WindowCommandsProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.WindowCommands"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.WindowCommands">
            <summary>
            Gets or sets the window commands
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.ResizeBorderThickness">
            <summary>
            Gets or sets resize border thickness.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.ResizeBorderThicknessProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.ResizeBorderThickness"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.RibbonWindow.GlowBrushProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.GlowBrush"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.GlowBrush">
            <summary>
            Gets or sets a brush which is used as the glow when the window is active.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.NonActiveGlowBrushProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.NonActiveGlowBrush"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.NonActiveGlowBrush">
            <summary>
            Gets or sets a brush which is used as the glow when the window is not active.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.NonActiveBorderBrushProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.NonActiveBorderBrush"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.NonActiveBorderBrush">
            <summary>
            Gets or sets a brush which is used as the border brush when the window is not active.
            </summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IsIconVisible">
            <summary>
            Gets or sets whether icon is visible.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsIconVisibleProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.IsIconVisible"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.VerticalIconAlignment">
            <summary>
            Gets or sets the vertical alignment of the icon.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.VerticalIconAlignmentProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.VerticalIconAlignment"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IsCollapsed">
            <summary>
            Gets whether window is collapsed
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsCollapsedProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.IsCollapsed"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IsAutomaticCollapseEnabled">
            <summary>
            Defines if the Ribbon should automatically set <see cref="P:Fluent.RibbonWindow.IsCollapsed"/> when the width or height of the owner window drop under <see cref="F:Fluent.Ribbon.MinimalVisibleWidth"/> or <see cref="F:Fluent.Ribbon.MinimalVisibleHeight"/>
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IsAutomaticCollapseEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.IsAutomaticCollapseEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.RibbonWindow.IgnoreTaskbarOnMaximize">
            <summary>
            Defines if the taskbar should be ignored and hidden while the window is maximized.
            </summary>
        </member>
        <member name="F:Fluent.RibbonWindow.IgnoreTaskbarOnMaximizeProperty">
            <summary>Identifies the <see cref="P:Fluent.RibbonWindow.IgnoreTaskbarOnMaximize"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.RibbonWindow.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.InitializeWindowChromeBehavior">
            <summary>
            Initializes the WindowChromeBehavior which is needed to render the custom WindowChrome.
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.InitializeGlowWindowBehavior">
            <summary>
            Initializes the GlowWindowBehavior which is needed to render the custom resize windows around the current window.
            </summary>
        </member>
        <member name="M:Fluent.RibbonWindow.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonWindow.OnStateChanged(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonWindow.GetPart``1(System.String)">
            <summary>
            Gets the template child with the given name.
            </summary>
            <typeparam name="T">The interface type inheirted from DependencyObject.</typeparam>
            <param name="name">The name of the template child.</param>
        </member>
        <member name="T:Fluent.ScreenTip">
            <summary>
            ScreenTips display the name of the control,
            the keyboard shortcut for the control, and a brief description
            of how to use the control. ScreenTips also can provide F1 support,
            which opens help and takes the user directly to the related
            help topic for the control whose ScreenTip was
            displayed when the F1 button was pressed
            </summary>
        </member>
        <member name="M:Fluent.ScreenTip.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.ScreenTip.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.Title">
            <summary>
            Gets or sets title of the screen tip
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.TitleProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.Title"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ScreenTip.Text">
            <summary>
            Gets or sets text of the screen tip
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.TextProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.Text"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ScreenTip.DisableReason">
            <summary>
            Gets or sets disable reason of the associated screen tip's control
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.DisableReasonProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.DisableReason"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ScreenTip.HelpTopic">
            <summary>
            Gets or sets help topic of the ScreenTip
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.HelpTopicProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.HelpTopic"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ScreenTip.Image">
            <summary>
            Gets or sets image of the screen tip
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.ImageProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.Image"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ScreenTip.HelpLabelVisibility">
            <summary>
            Shows or hides the Help Label
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.HelpLabelVisibilityProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.HelpLabelVisibility"/> dependency property.</summary>
        </member>
        <member name="E:Fluent.ScreenTip.HelpPressed">
            <summary>
            Occurs when user press F1 on ScreenTip with HelpTopic filled
            </summary>
        </member>
        <member name="P:Fluent.ScreenTip.IsRibbonAligned">
            <summary>
            Gets or set whether ScreenTip should positioned below Ribbon
            </summary>
        </member>
        <member name="F:Fluent.ScreenTip.IsRibbonAlignedProperty">
            <summary>Identifies the <see cref="P:Fluent.ScreenTip.IsRibbonAligned"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ScreenTip.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ScreenTip.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ScreenTip.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ScreenTip.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.ScreenTipHelpEventArgs">
            <summary>
            Event args for HelpPressed event handler
            </summary>
        </member>
        <member name="M:Fluent.ScreenTipHelpEventArgs.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="helpTopic">Help topic</param>
        </member>
        <member name="P:Fluent.ScreenTipHelpEventArgs.HelpTopic">
            <summary>
            Gets help topic associated with screen tip
            </summary>
        </member>
        <member name="T:Fluent.SeparatorTabItem">
            <summary>
            Represents separator to use in the TabControl
            </summary>
        </member>
        <member name="M:Fluent.SeparatorTabItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="T:Fluent.Spinner">
            <summary>
            Represents spinner control
            </summary>
        </member>
        <member name="E:Fluent.Spinner.ValueChanged">
            <summary>
            Occurs when value has been changed
            </summary>
        </member>
        <member name="P:Fluent.Spinner.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Spinner.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.Spinner.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.Value">
            <summary>
            Gets or sets current value
            </summary>
        </member>
        <member name="F:Fluent.Spinner.ValueProperty">
            <summary>
            Using a DependencyProperty as the backing store for Value.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Text">
            <summary>
            Gets current text from the spinner
            </summary>
        </member>
        <member name="F:Fluent.Spinner.TextProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.Text"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.Increment">
            <summary>
            Gets or sets a value added or subtracted from the value property
            </summary>
        </member>
        <member name="F:Fluent.Spinner.IncrementProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.Increment"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.Minimum">
            <summary>
            Gets or sets minimun value
            </summary>
        </member>
        <member name="F:Fluent.Spinner.MinimumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Minimum.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Maximum">
            <summary>
            Gets or sets maximum value
            </summary>
        </member>
        <member name="F:Fluent.Spinner.MaximumProperty">
            <summary>
            Using a DependencyProperty as the backing store for Maximum.
            This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="P:Fluent.Spinner.Format">
            <summary>
            Gets or sets string format of value
            </summary>
        </member>
        <member name="F:Fluent.Spinner.FormatProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.Format"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.Delay">
            <summary>
            Gets or sets the amount of time, in milliseconds,
            the Spinner waits while it is pressed before it starts repeating.
            The value must be non-negative. This is a dependency property.
            </summary>
        </member>
        <member name="F:Fluent.Spinner.DelayProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.Delay"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.Interval">
            <summary>
            Gets or sets the amount of time, in milliseconds,
            between repeats once repeating starts. The value must be non-negative.
            This is a dependency property.
            </summary>
        </member>
        <member name="F:Fluent.Spinner.IntervalProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.Interval"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.InputWidth">
            <summary>
            Gets or sets width of the value input part of spinner
            </summary>
        </member>
        <member name="F:Fluent.Spinner.InputWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.InputWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.TextToValueConverter">
            <summary>
            Gets or sets a converter which is used to convert from text to double and from double to text.
            </summary>
        </member>
        <member name="F:Fluent.Spinner.TextToValueConverterProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.TextToValueConverter"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.SelectAllTextOnFocus">
            <summary>
            Defines whether all text should be select as soon as this control gets focus.
            </summary>
        </member>
        <member name="F:Fluent.Spinner.SelectAllTextOnFocusProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.SelectAllTextOnFocus"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.Spinner.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.Spinner.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.Spinner.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.Spinner.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.Spinner.SelectAll">
            <summary>
            Select all text in the Spinner.
            </summary>
        </member>
        <member name="M:Fluent.Spinner.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:Fluent.Spinner.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Spinner.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled System.Windows.Input.Keyboard.KeyUp attached event reaches
            an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The System.Windows.Input.KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:Fluent.Spinner.CreateQuickAccessItem">
            <summary>
            Gets control which represents shortcut item.
            This item MUST be syncronized with the original
            and send command to original one control.
            </summary>
            <returns>Control which represents shortcut item</returns>
        </member>
        <member name="M:Fluent.Spinner.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overriden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="M:Fluent.Spinner.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.Spinner.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.SplitButton">
            <summary>
            Represents button control that allows
            you to add menu and handle clicks
            </summary>
        </member>
        <member name="P:Fluent.SplitButton.Command">
            <inheritdoc />
        </member>
        <member name="P:Fluent.SplitButton.CommandParameter">
            <inheritdoc />
        </member>
        <member name="P:Fluent.SplitButton.CommandTarget">
            <inheritdoc />
        </member>
        <member name="F:Fluent.SplitButton.CommandParameterProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.CommandParameter"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.SplitButton.CommandProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.Command"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.SplitButton.CommandTargetProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.CommandTarget"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.GroupName">
            <inheritdoc />
        </member>
        <member name="F:Fluent.SplitButton.GroupNameProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.GroupName"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.IsChecked">
            <inheritdoc />
        </member>
        <member name="F:Fluent.SplitButton.IsCheckedProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.IsChecked"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.IsCheckable">
            <summary>
            Gets or sets a value indicating whether SplitButton can be checked
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsCheckableProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.IsCheckable"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.DropDownToolTip">
            <summary>
            Gets or sets tooltip of dropdown part of split button
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.DropDownToolTipProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.DropDownToolTip"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.IsButtonEnabled">
            <summary>
            Gets or sets a value indicating whether the button part of split button is enabled.
            If you want to disable the button part and the DropDown please use <see cref="P:System.Windows.UIElement.IsEnabled"/>.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsButtonEnabledProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.IsButtonEnabled"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IsDefinitiveProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.IsDefinitive"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.SplitButton.PrimaryActionKeyTipPostfixProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.PrimaryActionKeyTipPostfix"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.PrimaryActionKeyTipPostfix">
            <summary>
            Gets or sets the postfix for the primary keytip action.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.SecondaryActionKeyTipPostfixProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.SecondaryActionKeyTipPostfix"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.SecondaryActionKeyTipPostfix">
            <summary>
            Gets or sets the postfix for the secondary keytip action.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.SecondaryKeyTipProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.SecondaryKeyTip"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.SplitButton.SecondaryKeyTip">
            <summary>
            Gets or sets the keytip for the secondary action.
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.ClickEvent">
            <summary>
            Occurs when user clicks
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Click">
            <summary>
            Occurs when user clicks
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.CheckedEvent">
            <summary>
            Occurs when button is checked
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Checked">
            <summary>
            Occurs when button is checked
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.UncheckedEvent">
            <summary>
            Occurs when button is unchecked
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Unchecked">
            <summary>
            Occurs when button is unchecked
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.IndeterminateEvent">
            <summary>
            Occurs when button is unchecked
            </summary>
        </member>
        <member name="E:Fluent.SplitButton.Indeterminate">
            <summary>
            Occurs when button is unchecked
            </summary>
        </member>
        <member name="M:Fluent.SplitButton.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.SplitButton.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.SplitButton.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.SplitButton.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.SplitButton.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.SplitButton.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="M:Fluent.SplitButton.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.SplitButton.CanAddButtonToQuickAccessToolBar">
            <summary>
            Gets or sets whether button can be added to quick access toolbar
            </summary>
        </member>
        <member name="F:Fluent.SplitButton.CanAddButtonToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.SplitButton.CanAddButtonToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.SplitButton.GetKeyTipInformations(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.SplitButton.OnIsSimplifiedChanged(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.SplitButton.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.StartScreen">
            <summary>
            Represents the container for the <see cref="T:Fluent.StartScreenTabControl"/>.
            </summary>
        </member>
        <member name="P:Fluent.StartScreen.Shown">
            <summary>
            Indicates whether the <see cref="T:Fluent.StartScreen"/> has aleaady been shown or not.
            </summary>
        </member>
        <member name="F:Fluent.StartScreen.ShownProperty">
            <summary>Identifies the <see cref="P:Fluent.StartScreen.Shown"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.StartScreen.Show">
            <summary>
            Shows the <see cref="T:Fluent.StartScreen"/>.
            </summary>
            <returns>
            <c>true</c> if the <see cref="T:Fluent.StartScreen"/> was made visible.
            <c>false</c> if the <see cref="T:Fluent.StartScreen"/> was previously shown and was not made visible during this call.
            </returns>
        </member>
        <member name="M:Fluent.StartScreen.Hide">
            <summary>
            Hides the <see cref="T:Fluent.StartScreen" />.
            </summary>
        </member>
        <member name="T:Fluent.StartScreenTabControl">
            <summary>
            Control for representing the left and right side of the start screen.
            </summary>
            <remarks>
            To control some aspects of the left handed side of this control please use properties prefixed with "ItemsPanel*".
            </remarks>
        </member>
        <member name="P:Fluent.StartScreenTabControl.LeftContent">
            <summary>
            Left side panel content of the startscreen.
            </summary>
        </member>
        <member name="F:Fluent.StartScreenTabControl.LeftContentProperty">
            <summary>Identifies the <see cref="P:Fluent.StartScreenTabControl.LeftContent"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.StartScreenTabControl.LeftContentMargin">
            <summary>
            Defines the margin for <see cref="P:Fluent.StartScreenTabControl.LeftContent"/>
            </summary>
        </member>
        <member name="F:Fluent.StartScreenTabControl.LeftContentMarginProperty">
            <summary>Identifies the <see cref="P:Fluent.StartScreenTabControl.LeftContentMargin"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.StartScreenTabControl.RightContent">
            <summary>
            Right side panel content of the startscreen.
            </summary>
        </member>
        <member name="F:Fluent.StartScreenTabControl.RightContentProperty">
            <summary>Identifies the <see cref="P:Fluent.StartScreenTabControl.RightContent"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.StartScreenTabControl.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="P:Fluent.StartScreenTabControl.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="T:Fluent.StatusBar">
            <summary>
            Represents ribbon status bar
            </summary>
        </member>
        <member name="M:Fluent.StatusBar.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.StatusBar.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Fluent.StatusBar.GetContainerForItemOverride">
            <inheritdoc />
        </member>
        <member name="M:Fluent.StatusBar.IsItemItsOwnContainerOverride(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.StatusBar.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.StatusBarItem">
            <summary>
            Represents ribbon status bar item
            </summary>
        </member>
        <member name="P:Fluent.StatusBarItem.Title">
            <summary>
            Gets or sets ribbon status bar item
            </summary>
        </member>
        <member name="F:Fluent.StatusBarItem.TitleProperty">
            <summary>Identifies the <see cref="P:Fluent.StatusBarItem.Title"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.StatusBarItem.Value">
            <summary>
            Gets or sets ribbon status bar value
            </summary>
        </member>
        <member name="F:Fluent.StatusBarItem.ValueProperty">
            <summary>Identifies the <see cref="P:Fluent.StatusBarItem.Value"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.StatusBarItem.IsChecked">
            <summary>
            Gets or sets whether status bar item is checked in menu
            </summary>
        </member>
        <member name="F:Fluent.StatusBarItem.IsCheckedProperty">
            <summary>Identifies the <see cref="P:Fluent.StatusBarItem.IsChecked"/> dependency property.</summary>
        </member>
        <member name="E:Fluent.StatusBarItem.Checked">
            <summary>
            Occurs when status bar item checks
            </summary>
        </member>
        <member name="E:Fluent.StatusBarItem.Unchecked">
            <summary>
            Occurs when status bar item unchecks
            </summary>
        </member>
        <member name="M:Fluent.StatusBarItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="T:Fluent.StatusBarMenuItem">
            <summary>
            Represents menu item in ribbon status bar menu
            </summary>
        </member>
        <member name="P:Fluent.StatusBarMenuItem.StatusBarItem">
            <summary>
            Gets or sets Ribbon Status Bar menu item
            </summary>
        </member>
        <member name="F:Fluent.StatusBarMenuItem.StatusBarItemProperty">
            <summary>Identifies the <see cref="P:Fluent.StatusBarMenuItem.StatusBarItem"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.StatusBarMenuItem.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.StatusBarMenuItem.#ctor(Fluent.StatusBarItem)">
            <summary>
            Default constructor
            </summary>
            <param name="item">Ribbon Status Bar menu item</param>
        </member>
        <member name="T:Fluent.StatusBarPanel">
            <summary>
            Represents panel for status bar
            </summary>
        </member>
        <member name="M:Fluent.StatusBarPanel.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.StatusBarPanel.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.TextBox">
            <summary>
            Represents custom Fluent UI TextBox
            </summary>
        </member>
        <member name="P:Fluent.TextBox.InputWidth">
            <summary>
            Gets or sets width of the value input part of textbox
            </summary>
        </member>
        <member name="F:Fluent.TextBox.InputWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.InputWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.TextBox.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.TextBox.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.TextBox.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.TextBox.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.TextBox.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.TextBox.BindQuickAccessItem(System.Windows.FrameworkElement)">
            <summary>
            This method must be overridden to bind properties to use in quick access creating
            </summary>
            <param name="element">Toolbar item</param>
        </member>
        <member name="M:Fluent.TextBox.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="P:Fluent.TextBox.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.TextBox.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.TextBox.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.TextBox.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.KeyTipProperty">
            <inheritdoc cref="F:Fluent.KeyTip.KeysProperty"/>
        </member>
        <member name="P:Fluent.TextBox.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.TextBox.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.TextBox.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.TextBox.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.TextBox.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.TextBox.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.TextBox.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TextBox.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.ToggleButton">
            <summary>
            Represents toggle button
            </summary>
        </member>
        <member name="P:Fluent.ToggleButton.Size">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.SizeProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.Size"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.SizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.SizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.SizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.SimplifiedSizeDefinition">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.SimplifiedSizeDefinitionProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.SimplifiedSizeDefinition"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.KeyTip">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.KeyTipProperty">
            <inheritdoc cref="F:Fluent.KeyTip.KeysProperty"/>
        </member>
        <member name="P:Fluent.ToggleButton.GroupName">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.GroupNameProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.GroupName"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.Header">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.HeaderProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.Header"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.Icon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.IconProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.Icon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.LargeIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.LargeIconProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.LargeIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.MediumIcon">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.MediumIconProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.MediumIcon"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.IsDefinitive">
            <summary>
            Gets or sets whether ribbon control click must close backstage
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.IsDefinitiveProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.IsDefinitive"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.ToggleButton.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="F:Fluent.ToggleButton.IsSimplifiedProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.IsSimplified"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ToggleButton.#cctor">
            <summary>
            Initializes static members of the <see cref="T:Fluent.ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Fluent.ToggleButton"/> class.
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.OnClick">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.OnChecked(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.InvokeClick">
            <summary>
            Used to call OnClick (which is protected)
            </summary>
        </member>
        <member name="M:Fluent.ToggleButton.CreateQuickAccessItem">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ToggleButton.CanAddToQuickAccessToolBar">
            <inheritdoc />
        </member>
        <member name="F:Fluent.ToggleButton.CanAddToQuickAccessToolBarProperty">
            <summary>Identifies the <see cref="P:Fluent.ToggleButton.CanAddToQuickAccessToolBar"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.ToggleButton.OnKeyTipPressed">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.OnKeyTipBack">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.Fluent#ISimplifiedStateControl#UpdateSimplifiedState(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.Fluent#ILogicalChildSupport#AddLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.Fluent#ILogicalChildSupport#RemoveLogicalChild(System.Object)">
            <inheritdoc />
        </member>
        <member name="P:Fluent.ToggleButton.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:Fluent.ToggleButton.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="T:Fluent.TwoLineLabel">
            <summary>
            Represents specific label to use in particular ribbon controls
            </summary>
        </member>
        <member name="F:Fluent.TwoLineLabel.textRun">
            <summary>
            Run with text
            </summary>
        </member>
        <member name="P:Fluent.TwoLineLabel.HasTwoLines">
            <summary>
            Gets or sets whether label must have two lines
            </summary>
        </member>
        <member name="F:Fluent.TwoLineLabel.HasTwoLinesProperty">
            <summary>Identifies the <see cref="P:Fluent.TwoLineLabel.HasTwoLines"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnHasTwoLinesChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles HasTwoLines property changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.TwoLineLabel.HasGlyph">
            <summary>
            Gets or sets whether label has glyph
            </summary>
        </member>
        <member name="F:Fluent.TwoLineLabel.HasGlyphProperty">
            <summary>Identifies the <see cref="P:Fluent.TwoLineLabel.HasGlyph"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnHasGlyphChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles HasGlyph property changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="P:Fluent.TwoLineLabel.Text">
            <summary>
            Gets or sets the text
            </summary>
        </member>
        <member name="F:Fluent.TwoLineLabel.TextProperty">
            <summary>Identifies the <see cref="P:Fluent.TwoLineLabel.Text"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.TwoLineLabel.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TwoLineLabel.OnCreateAutomationPeer">
            <inheritdoc />
        </member>
        <member name="M:Fluent.TwoLineLabel.OnTextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles text property changes
            </summary>
            <param name="d">Object</param>
            <param name="e">The event data</param>
        </member>
        <member name="M:Fluent.TwoLineLabel.UpdateTextRun">
            <summary>
            Updates text runs and adds newline if HasTwoLines == true
            </summary>
        </member>
        <member name="T:Fluent.UniformGridWithItemSize">
            <summary>
            UniformGrid is used to arrange children in a grid with all equal cell sizes.
            </summary>
        </member>
        <member name="P:Fluent.UniformGridWithItemSize.Orientation">
            <summary>
            Gets or sets panel orientation
            </summary>
        </member>
        <member name="F:Fluent.UniformGridWithItemSize.OrientationProperty">
            <summary>Identifies the <see cref="P:Fluent.UniformGridWithItemSize.Orientation"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.UniformGridWithItemSize.MinColumns">
            <summary>
            Specifies the number of maximum columns in the grid
            </summary>
        </member>
        <member name="F:Fluent.UniformGridWithItemSize.MinColumnsProperty">
            <summary>Identifies the <see cref="P:Fluent.UniformGridWithItemSize.MinColumns"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.UniformGridWithItemSize.MaxColumns">
            <summary>
            Specifies the number of maximum columns in the grid
            </summary>
        </member>
        <member name="F:Fluent.UniformGridWithItemSize.MaxColumnsProperty">
            <summary>Identifies the <see cref="P:Fluent.UniformGridWithItemSize.MaxColumns"/> dependency property.</summary>
        </member>
        <member name="F:Fluent.UniformGridWithItemSize.ItemWidthProperty">
            <summary>Identifies the <see cref="P:Fluent.UniformGridWithItemSize.ItemWidth"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.UniformGridWithItemSize.ItemWidth">
            <summary>
            Specifies the item width.
            </summary>
        </member>
        <member name="F:Fluent.UniformGridWithItemSize.ItemHeightProperty">
            <summary>Identifies the <see cref="P:Fluent.UniformGridWithItemSize.ItemHeight"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.UniformGridWithItemSize.ItemHeight">
            <summary>
            Specifies the item height.
            </summary>
        </member>
        <member name="M:Fluent.UniformGridWithItemSize.MeasureOverride(System.Windows.Size)">
            <summary>
            Compute the desired size of this UniformGrid by measuring all of the
            children with a constraint equal to a cell's portion of the given
            constraint (e.g. for a 2 x 4 grid, the child constraint would be
            constraint.Width*0.5 x constraint.Height*0.25).  The maximum child
            width and maximum child height are tracked, and then the desired size
            is computed by multiplying these maximums by the row and column count
            (e.g. for a 2 x 4 grid, the desired size for the UniformGrid would be
            maxChildDesiredWidth*2 x maxChildDesiredHeight*4).
            </summary>
            <param name="constraint">Constraint</param>
            <returns>Desired size</returns>
        </member>
        <member name="M:Fluent.UniformGridWithItemSize.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arrange the children of this UniformGrid by distributing space evenly 
            among all of the children, making each child the size equal to a cell's
            portion of the given arrangeSize (e.g. for a 2 x 4 grid, the child size
            would be arrangeSize*0.5 x arrangeSize*0.25)
            </summary>
            <param name="arrangeSize">Arrange size</param>
        </member>
        <member name="M:Fluent.UniformGridWithItemSize.UpdateComputedValues(System.Int32)">
             <summary>
             If either Rows or Columns are set to 0, then dynamically compute these
             values based on the actual number of non-collapsed children.
            
             In the case when both Rows and Columns are set to 0, then make Rows 
             and Columns be equal, thus laying out in a square grid.
             </summary>
        </member>
        <member name="T:Fluent.WindowSteeringHelperControl">
            <summary>
            Helper control which enables easy embedding of window steering functions.
            </summary>
        </member>
        <member name="M:Fluent.WindowSteeringHelperControl.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:Fluent.WindowSteeringHelperControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.WindowSteeringHelperControl.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.ApplicationMenuRightScrollViewerExtractorConverter">
            <summary>
            Extracts right content presenter of application menu converter
            </summary>
        </member>
        <member name="M:Fluent.Converters.ApplicationMenuRightScrollViewerExtractorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ApplicationMenuRightScrollViewerExtractorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.ColorToSolidColorBrushValueConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> to a <see cref="T:System.Windows.Media.SolidColorBrush"/> and back.
            </summary>
        </member>
        <member name="M:Fluent.Converters.ColorToSolidColorBrushValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ColorToSolidColorBrushValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.EqualsToVisibilityConverter">
            <summary>
            Checks equality of value and the converter parameter.
            Returns <see cref="F:System.Windows.Visibility.Visible"/> if they are equal.
            Returns <see cref="F:System.Windows.Visibility.Collapsed"/> if they are NOT equal.
            </summary>
        </member>
        <member name="M:Fluent.Converters.EqualsToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.EqualsToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.InverseBoolConverter">
            <summary>
            Converter used to invert a boolean value.
            </summary>
        </member>
        <member name="M:Fluent.Converters.InverseBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.InverseBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.InvertNumericConverter">
            <summary>
            Used to invert numbers
            </summary>
        </member>
        <member name="M:Fluent.Converters.InvertNumericConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.InvertNumericConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.IsNullConverter">
            <summary>
                Converts <c>null</c> to <c>true</c> and not <c>null</c> to <c>false</c>.
            </summary>
        </member>
        <member name="F:Fluent.Converters.IsNullConverter.Instance">
            <summary>
                A singleton instance for <see cref="T:Fluent.Converters.IsNullConverter" />.
            </summary>
        </member>
        <member name="M:Fluent.Converters.IsNullConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.IsNullConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.ObjectToImageConverter">
            <summary>
            Converts <see cref="T:System.String"/>, <see cref="T:System.Uri"/>, <see cref="T:System.Drawing.Icon"/> or <see cref="T:System.Windows.Media.ImageSource"/> to <see cref="T:System.Windows.Controls.Image"/> or <see cref="T:System.Windows.Media.ImageSource"/> (dependent upon target type).
            When converting you can pass a desired size as the converter parameter.
            The returned <see cref="T:System.Windows.Media.ImageSource"/> will be the closest <see cref="T:System.Windows.Media.Imaging.BitmapFrame"/> found in the provided image.
            </summary>
            <remarks>
            - This converter is also a <see cref="T:System.Windows.Markup.MarkupExtension"/> to be able to extract the <see cref="T:System.Windows.DpiScale"/> from the target control.
            - This converter is also a <see cref="T:System.Windows.Data.IMultiValueConverter"/>. The order for parameters/values is:
              0 = value to convert
              1 = visual target or desired size
              2 = desired size
              Index checks are applied during value extraction, so providing null or just the value to convert are considered valid.
            </remarks>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.#ctor(System.Object)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="input">The object or binding to which the converter should be applied to.</param>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.#ctor(System.Object,System.Windows.Size)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="input">The object or binding to which the converter should be applied to.</param>
            <param name="desiredSize">The desired size for the image.</param>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.#ctor(System.Object,System.Object)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="input">The object or binding to which the converter should be applied to.</param>
            <param name="desiredSize">The desired size for the image.</param>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.#ctor(System.Object,System.Object,System.Windows.Data.Binding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="input">The object or binding to which the converter should be applied to.</param>
            <param name="desiredSize">The desired size for the image.</param>
            <param name="targetVisualBinding">The target visual on which the image/icon should be shown.</param>
        </member>
        <member name="P:Fluent.Converters.ObjectToImageConverter.TargetVisualBinding">
            <summary>
            The target visual on which the image/icon should be shown.
            </summary>
        </member>
        <member name="P:Fluent.Converters.ObjectToImageConverter.IconBinding">
            <summary>
            The binding to which the converter should be applied to.
            </summary>
        </member>
        <member name="P:Fluent.Converters.ObjectToImageConverter.DesiredSizeBinding">
            <summary>
            The binding for the desired size for the image.
            </summary>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.GetValueToConvert(System.Object,System.Windows.Size,System.Windows.Media.Visual)">
            <summary>
            Returns the value to convert.
            </summary>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.ProvideValue(System.IServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.CreateFrozenImageSource(System.Object,System.Windows.Size)">
            <summary>
            Extracts an <see cref="T:System.Windows.Media.ImageSource"/> from <paramref name="value"/> which closest matches the <paramref name="desiredSize"/>.
            </summary>
            <param name="value">Value from which the <see cref="T:System.Windows.Media.ImageSource"/> should be extracted. It can be of type <see cref="T:System.Windows.Media.ImageSource"/></param>
            <param name="desiredSize">The desired size to extract from <paramref name="value"/> .</param>
            <returns>An frozen <see cref="T:System.Windows.Media.ImageSource"/> which closest matches <paramref name="desiredSize"/></returns>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.CreateFrozenImageSource(System.Object,System.Windows.Media.Visual,System.Windows.Size)">
            <summary>
            Extracts an <see cref="T:System.Windows.Media.ImageSource"/> from <paramref name="value"/> which closest matches the <paramref name="desiredSize"/>.
            </summary>
            <param name="value">Value from which the <see cref="T:System.Windows.Media.ImageSource"/> should be extracted. It can be of type <see cref="T:System.Windows.Media.ImageSource"/></param>
            <param name="targetVisual">The target on which the <see cref="T:System.Windows.Media.ImageSource"/> will be used.</param>
            <param name="desiredSize">The desired size to extract from <paramref name="value"/> .</param>
            <returns>An frozen <see cref="T:System.Windows.Media.ImageSource"/> which closest matches <paramref name="desiredSize"/></returns>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.CreateImageSource(System.Object,System.Windows.Size)">
            <summary>
            Extracts an <see cref="T:System.Windows.Media.ImageSource"/> from <paramref name="value"/> which closest matches the <paramref name="desiredSize"/>.
            </summary>
            <param name="value">Value from which the <see cref="T:System.Windows.Media.ImageSource"/> should be extracted. It can be of type <see cref="T:System.Windows.Media.ImageSource"/></param>
            <param name="desiredSize">The desired size to extract from <paramref name="value"/> .</param>
            <returns>An <see cref="T:System.Windows.Media.ImageSource"/> which closest matches <paramref name="desiredSize"/></returns>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.CreateImageSource(System.Object,System.Windows.Media.Visual,System.Windows.Size)">
            <summary>
            Extracts an <see cref="T:System.Windows.Media.ImageSource"/> from <paramref name="value"/> which closest matches the <paramref name="desiredSize"/>.
            </summary>
            <param name="value">Value from which the <see cref="T:System.Windows.Media.ImageSource"/> should be extracted. It can be of type <see cref="T:System.Windows.Media.ImageSource"/></param>
            /// <param name="targetVisual">The target on which the <see cref="T:System.Windows.Media.ImageSource"/> will be used.</param>
            <param name="desiredSize">The desired size to extract from <paramref name="value"/> .</param>
            <returns>An <see cref="T:System.Windows.Media.ImageSource"/> which closest matches <paramref name="desiredSize"/></returns>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.GetScaledDesiredSize(System.Windows.Size,System.Windows.Media.Visual)">
            <summary>
            Get the scaled desired size.
            </summary>
        </member>
        <member name="M:Fluent.Converters.ObjectToImageConverter.GetScaledDesiredSize(System.Windows.Size,System.Windows.DpiScale)">
            <summary>
            Get the scaled desired size.
            </summary>
        </member>
        <member name="T:Fluent.Converters.RibbonGroupBoxStateDefinitionConverter">
            <summary>
            Class which enables conversion from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonGroupBoxStateDefinition"/>
            </summary>
        </member>
        <member name="M:Fluent.Converters.RibbonGroupBoxStateDefinitionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.RibbonGroupBoxStateDefinitionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.SizeDefinitionConverter">
            <summary>
            Class which enables conversion from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonControlSizeDefinition"/>
            </summary>
        </member>
        <member name="M:Fluent.Converters.SizeDefinitionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.SizeDefinitionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Converters.SpinnerTextToValueConverter">
            <summary>
            Converter class which converts from <see cref="T:System.String"/> to <see cref="T:System.Double"/> and back.
            </summary>
        </member>
        <member name="F:Fluent.Converters.SpinnerTextToValueConverter.DefaultInstance">
            <summary>
            Gets a default instance of <see cref="T:Fluent.Converters.SpinnerTextToValueConverter"/>.
            </summary>
        </member>
        <member name="M:Fluent.Converters.SpinnerTextToValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.SpinnerTextToValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.SpinnerTextToValueConverter.TextToDouble(System.String,System.String,System.Double,System.Globalization.CultureInfo)">
            <summary>
            Converts the given <paramref name="text"/> to a <see cref="T:System.Double"/>.
            </summary>
            <returns>The <see cref="T:System.Double"/> value converted from <paramref name="text"/> or <paramref name="previousValue"/> if the conversion fails.</returns>
        </member>
        <member name="M:Fluent.Converters.SpinnerTextToValueConverter.DoubleToText(System.Double,System.String,System.Globalization.CultureInfo)">
            <summary>
            Converts <paramref name="value"/> to a formatted text using <paramref name="format"/>.
            </summary>
            <returns><paramref name="value"/> converted to a <see cref="T:System.String"/>.</returns>
        </member>
        <member name="T:Fluent.Converters.StaticConverters">
            <summary>
            Hold static instances of several commonly used converters.
            </summary>
        </member>
        <member name="F:Fluent.Converters.StaticConverters.InvertNumericConverter">
            <summary>
            Get a static instance of <see cref="F:Fluent.Converters.StaticConverters.InvertNumericConverter"/>
            </summary>
        </member>
        <member name="F:Fluent.Converters.StaticConverters.ThicknessConverter">
            <summary>
            Get a static instance of <see cref="F:Fluent.Converters.StaticConverters.ThicknessConverter"/>
            </summary>
        </member>
        <member name="F:Fluent.Converters.StaticConverters.ObjectToImageConverter">
            <summary>
            Get a static instance of <see cref="F:Fluent.Converters.StaticConverters.ObjectToImageConverter"/>
            </summary>
        </member>
        <member name="F:Fluent.Converters.StaticConverters.ColorToSolidColorBrushValueConverter">
            <summary>
            Get a static instance of <see cref="F:Fluent.Converters.StaticConverters.ColorToSolidColorBrushValueConverter"/>
            </summary>
        </member>
        <member name="F:Fluent.Converters.StaticConverters.EqualsToVisibilityConverter">
            <summary>
            Get a static instance of <see cref="F:Fluent.Converters.StaticConverters.EqualsToVisibilityConverter"/>
            </summary>
        </member>
        <member name="F:Fluent.Converters.StaticConverters.InverseBoolConverter">
            <summary>
            Get a static instance of <see cref="F:Fluent.Converters.StaticConverters.InverseBoolConverter"/>
            </summary>
        </member>
        <member name="T:Fluent.Converters.ThicknessConverter">
            <summary>
            Used to convert from four double values to <see cref="T:System.Windows.Thickness"/>
            </summary>
        </member>
        <member name="M:Fluent.Converters.ThicknessConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Converters.ThicknessConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.IconConverter">
            <summary>
            Icon converter provides window or application default icon if user-defined is not present.
            </summary>
        </member>
        <member name="M:Fluent.IconConverter.#ctor(System.Windows.Data.Binding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="iconBinding">The binding to which the converter should be applied to.</param>
        </member>
        <member name="M:Fluent.IconConverter.#ctor(System.Windows.Data.Binding,System.Windows.Data.Binding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="iconBinding">The binding to which the converter should be applied to.</param>
            <param name="targetVisualBinding">The target visual on which the image/icon should be shown.</param>
        </member>
        <member name="M:Fluent.IconConverter.#ctor(System.Windows.Data.Binding,System.Object,System.Windows.Data.Binding)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="iconBinding">The binding to which the converter should be applied to.</param>
            <param name="desiredSize">The desired size for the image.</param>
            <param name="targetVisualBinding">The target visual on which the image/icon should be shown.</param>
        </member>
        <member name="M:Fluent.IconConverter.GetValueToConvert(System.Object,System.Windows.Size,System.Windows.Media.Visual)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.KeyTipInformation">
            <summary>
            Container class for KeyTip informations
            </summary>
        </member>
        <member name="M:Fluent.KeyTipInformation.#ctor(System.String,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="keys">The keys to be used for <see cref="P:Fluent.KeyTipInformation.KeyTip"/>.</param>
            <param name="associatedElement">The element to which this instance belongs to.</param>
            <param name="hide">Defines if the created <see cref="P:Fluent.KeyTipInformation.KeyTip"/> should be hidden or not.</param>
        </member>
        <member name="P:Fluent.KeyTipInformation.Keys">
            <summary>
            Gets <see cref="F:Fluent.KeyTip.KeysProperty"/>
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.AssociatedElement">
            <summary>
            Gets the element this instance belongs to.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.VisualTarget">
            <summary>
            Gets or sets the element which acts as the visual target.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.DefaultVisibility">
            <summary>
            Gets the initial visibility.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.KeyTip">
            <summary>
            Gets the <see cref="T:Fluent.KeyTip"/> for <see cref="P:Fluent.KeyTipInformation.AssociatedElement"/>.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.Position">
            <summary>
            Gets or sets the position of <see cref="P:Fluent.KeyTipInformation.KeyTip"/>.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.BackupVisibility">
            <summary>
            Gets or sets the backed up value of <see cref="T:System.Windows.Visibility"/> of <see cref="P:Fluent.KeyTipInformation.KeyTip"/>
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.IsVisible">
            <summary>
            Gets <see cref="P:System.Windows.UIElement.IsVisible" /> from <see cref="P:Fluent.KeyTipInformation.KeyTip"/>.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.Visibility">
            <summary>
            Gets or sets <see cref="P:System.Windows.UIElement.Visibility" /> from <see cref="P:Fluent.KeyTipInformation.KeyTip"/>.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipInformation.IsEnabled">
            <summary>
            Gets <see cref="P:System.Windows.UIElement.IsEnabled" /> from <see cref="P:Fluent.KeyTipInformation.KeyTip"/>
            </summary>
        </member>
        <member name="T:Fluent.KeyTipPressedResult">
            <summary>
            Represents the result of <see cref="M:Fluent.IKeyTipedControl.OnKeyTipPressed"/>.
            </summary>
        </member>
        <member name="F:Fluent.KeyTipPressedResult.Empty">
            <summary>
            An empty default instance.
            </summary>
        </member>
        <member name="M:Fluent.KeyTipPressedResult.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="pressedElementAquiredFocus">Defines if the pressed element aquired focus or not.</param>
            <param name="pressedElementOpenedPopup">Defines if the pressed element opened a popup or not.</param>
        </member>
        <member name="P:Fluent.KeyTipPressedResult.PressedElementAquiredFocus">
            <summary>
            Defines if the pressed element aquired focus or not.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipPressedResult.PressedElementOpenedPopup">
            <summary>
            Defines if the pressed element opened a popup or not.
            </summary>
        </member>
        <member name="T:Fluent.RibbonControlSizeDefinition">
            <summary>
            Class to map from <see cref="T:Fluent.RibbonGroupBoxState"/> to <see cref="T:Fluent.RibbonControlSize"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.#ctor(Fluent.RibbonControlSize,Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:Fluent.RibbonControlSizeDefinition.Large">
            <summary>
            Gets or sets the value for large group sizes
            </summary>
        </member>
        <member name="P:Fluent.RibbonControlSizeDefinition.Middle">
            <summary>
            Gets or sets the value for middle group sizes
            </summary>
        </member>
        <member name="P:Fluent.RibbonControlSizeDefinition.Small">
            <summary>
            Gets or sets the value for small group sizes
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.FromString(System.String)">
            <summary>
            Converts from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonControlSizeDefinition"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.op_Implicit(System.String)~Fluent.RibbonControlSizeDefinition">
            <summary>
            Converts from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonControlSizeDefinition"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.op_Implicit(Fluent.RibbonControlSizeDefinition)~System.String">
            <summary>
            Converts from <see cref="T:Fluent.RibbonControlSizeDefinition"/> to <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.ToRibbonControlSize(System.String)">
            <summary>
            Converts from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonControlSize"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.GetSize(Fluent.RibbonGroupBoxState)">
            <summary>
            Gets the appropriate <see cref="T:Fluent.RibbonControlSize"/> from <see cref="P:Fluent.RibbonControlSizeDefinition.Large"/>, <see cref="P:Fluent.RibbonControlSizeDefinition.Middle"/> or <see cref="P:Fluent.RibbonControlSizeDefinition.Small"/> depending on <paramref name="ribbonGroupBoxState"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.GetSize(Fluent.RibbonControlSize)">
            <summary>
            Gets the appropriate <see cref="T:Fluent.RibbonControlSize"/> from <see cref="P:Fluent.RibbonControlSizeDefinition.Large"/>, <see cref="P:Fluent.RibbonControlSizeDefinition.Middle"/> or <see cref="P:Fluent.RibbonControlSizeDefinition.Small"/> depending on <paramref name="ribbonControlSize"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.Equals(Fluent.RibbonControlSizeDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.op_Equality(Fluent.RibbonControlSizeDefinition,Fluent.RibbonControlSizeDefinition)">
            <summary>Determines whether the specified object instances are considered equal.</summary>
            <param name="left">The first object to compare. </param>
            <param name="right">The second object to compare. </param>
            <returns>true if the objects are considered equal; otherwise, false. If both <paramref name="left" /> and <paramref name="right" /> are null, the method returns true.</returns>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.op_Inequality(Fluent.RibbonControlSizeDefinition,Fluent.RibbonControlSizeDefinition)">
            <summary>Determines whether the specified object instances are not considered equal.</summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>true if the objects are not considered equal; otherwise, false. If both <paramref name="left" /> and <paramref name="right" /> are null, the method returns false.</returns>
        </member>
        <member name="M:Fluent.RibbonControlSizeDefinition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Fluent.RibbonGroupBoxStateDefinition">
            <summary>
            This class holds the Holds transitionable states when the <see cref="T:Fluent.RibbonGroupsContainer"/> automatically resizes the <see cref="T:Fluent.RibbonGroupBox"/>.
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:Fluent.RibbonGroupBoxStateDefinition.States">
            <summary>
            Gets or sets the transitionable states
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.FromString(System.String)">
            <summary>
            Converts from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonGroupBoxStateDefinition"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.op_Implicit(System.String)~Fluent.RibbonGroupBoxStateDefinition">
            <summary>
            Converts from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonGroupBoxStateDefinition"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.op_Implicit(Fluent.RibbonGroupBoxStateDefinition)~System.String">
            <summary>
            Converts from <see cref="T:Fluent.RibbonGroupBoxStateDefinition"/> to <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.ToRibbonGroupBoxState(System.String)">
            <summary>
            Converts from <see cref="T:System.String"/> to <see cref="T:Fluent.RibbonGroupBoxState"/>
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.EnlargeState(Fluent.RibbonGroupBoxState)">
            <summary>
            Gets the appropriate enlarged <see cref="T:Fluent.RibbonGroupBoxState"/> depending on StateDefinition />
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.ReduceState(Fluent.RibbonGroupBoxState)">
            <summary>
            Gets the appropriate reduced <see cref="T:Fluent.RibbonGroupBoxState"/> depending on StateDefinition />
            </summary>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.Equals(Fluent.RibbonGroupBoxStateDefinition)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.op_Equality(Fluent.RibbonGroupBoxStateDefinition,Fluent.RibbonGroupBoxStateDefinition)">
            <summary>Determines whether the specified object instances are considered equal.</summary>
            <param name="left">The first object to compare. </param>
            <param name="right">The second object to compare. </param>
            <returns>true if the objects are considered equal; otherwise, false. If both <paramref name="left" /> and <paramref name="right" /> are null, the method returns true.</returns>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.op_Inequality(Fluent.RibbonGroupBoxStateDefinition,Fluent.RibbonGroupBoxStateDefinition)">
            <summary>Determines whether the specified object instances are not considered equal.</summary>
            <param name="left">The first object to compare.</param>
            <param name="right">The second object to compare.</param>
            <returns>true if the objects are not considered equal; otherwise, false. If both <paramref name="left" /> and <paramref name="right" /> are null, the method returns false.</returns>
        </member>
        <member name="M:Fluent.RibbonGroupBoxStateDefinition.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Fluent.RibbonStateStorage">
            <summary>
            Handles loading and saving the state of a <see cref="T:Fluent.Ribbon"/> from/to a <see cref="T:System.IO.MemoryStream"/>, for temporary storage, and from/to <see cref="T:System.IO.IsolatedStorage.IsolatedStorage"/>, for persistent storage.
            </summary>
        </member>
        <member name="M:Fluent.RibbonStateStorage.#ctor(Fluent.Ribbon)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="ribbon">The <see cref="T:Fluent.Ribbon"/> of which the state should be stored.</param>
        </member>
        <member name="M:Fluent.RibbonStateStorage.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Fluent.RibbonStateStorage"/> class.
            </summary>
        </member>
        <member name="P:Fluent.RibbonStateStorage.Disposed">
            <summary>
            Gets whether this object already got disposed.
            </summary>
        </member>
        <member name="P:Fluent.RibbonStateStorage.IsLoading">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonStateStorage.IsLoaded">
            <inheritdoc />
        </member>
        <member name="P:Fluent.RibbonStateStorage.IsolatedStorageFileName">
            <summary>
                Gets name of the isolated storage file
            </summary>
        </member>
        <member name="M:Fluent.RibbonStateStorage.SaveTemporary">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonStateStorage.Save">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonStateStorage.Save(System.IO.Stream)">
            <summary>
            Saves state to <paramref name="stream"/>.
            </summary>
            <param name="stream">Stream</param>
        </member>
        <member name="M:Fluent.RibbonStateStorage.CreateStateData">
            <summary>
            Create the serialized state data which should be saved later.
            </summary>
            <returns><see cref="T:System.Text.StringBuilder"/> which contains the serialized state data.</returns>
        </member>
        <member name="M:Fluent.RibbonStateStorage.LoadTemporary">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonStateStorage.Load">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonStateStorage.Load(System.IO.Stream)">
            <summary>
            Loads state from <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to load the state from.</param>
        </member>
        <member name="M:Fluent.RibbonStateStorage.LoadStateCore(System.IO.Stream)">
            <summary>
            Loads state from <paramref name="stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to load the state from.</param>
        </member>
        <member name="M:Fluent.RibbonStateStorage.LoadState(System.String)">
            <summary>
            Loads state from <paramref name="data"/>.
            </summary>
            <param name="data">The <see cref="T:System.String"/> to load the state from.</param>
        </member>
        <member name="M:Fluent.RibbonStateStorage.IsolatedStorageFileExists(System.IO.IsolatedStorage.IsolatedStorageFile,System.String)">
            <summary>
            Determines whether the given file exists in the given storage
            </summary>
        </member>
        <member name="M:Fluent.RibbonStateStorage.GetIsolatedStorageFile">
            <summary>
            Get this <see cref="T:System.IO.IsolatedStorage.IsolatedStorageFile"/> which should be used to store the current state.
            </summary>
            <returns><see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain"/> or <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForAssembly"/> if <see cref="M:System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForDomain"/> threw an exception.</returns>
        </member>
        <member name="M:Fluent.RibbonStateStorage.Reset">
            <summary>
            Resets saved state.
            </summary>
        </member>
        <member name="M:Fluent.RibbonStateStorage.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonStateStorage.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">Defines whether managed resources should also be freed.</param>
        </member>
        <member name="T:Fluent.GrayscaleEffect">
            <summary>
            An effect that turns the input into shades of a single color.
            </summary>
        </member>
        <member name="F:Fluent.GrayscaleEffect.InputProperty">
            <summary>
            Dependency property for Input
            </summary>
        </member>
        <member name="F:Fluent.GrayscaleEffect.FilterColorProperty">
            <summary>Identifies the <see cref="P:Fluent.GrayscaleEffect.FilterColor"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.GrayscaleEffect.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Fluent.GrayscaleEffect.Input">
            <summary>
            Implicit input
            </summary>
        </member>
        <member name="P:Fluent.GrayscaleEffect.FilterColor">
            <summary>
            The color used to tint the input.
            </summary>
        </member>
        <member name="T:Fluent.IconSize">
            <summary>
            Todo
            </summary>
        </member>
        <member name="F:Fluent.IconSize.Small">
            <summary>
            Small icon size. Usually 16x16.
            </summary>
        </member>
        <member name="F:Fluent.IconSize.Medium">
            <summary>
            Medium icon size. Usually 24x24.
            </summary>
        </member>
        <member name="F:Fluent.IconSize.Large">
            <summary>
            Large icon size. Usually 32x32.
            </summary>
        </member>
        <member name="F:Fluent.IconSize.Custom">
            <summary>
            Custom icon size.
            </summary>
        </member>
        <member name="T:Fluent.RibbonControlSize">
            <summary>
            Represents logical sizes of a ribbon control
            </summary>
        </member>
        <member name="F:Fluent.RibbonControlSize.Large">
            <summary>
            Large size of a control
            </summary>
        </member>
        <member name="F:Fluent.RibbonControlSize.Middle">
            <summary>
            Middle size of a control
            </summary>
        </member>
        <member name="F:Fluent.RibbonControlSize.Small">
            <summary>
            Small size of a control
            </summary>
        </member>
        <member name="T:Fluent.RibbonGroupBoxState">
            <summary>
            Represents states of ribbon group
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Large">
            <summary>
            Large. All controls in the group will try to be large size
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Middle">
            <summary>
            Middle. All controls in the group will try to be middle size
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Small">
            <summary>
            Small. All controls in the group will try to be small size
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.Collapsed">
            <summary>
            Collapsed. Group will collapse its content in a single button
            </summary>
        </member>
        <member name="F:Fluent.RibbonGroupBoxState.QuickAccess">
            <summary>
            QuickAccess. Group will collapse its content in a single button in quick access toolbar
            </summary>
        </member>
        <member name="T:Fluent.Extensibility.IKeyTipInformationProvider">
            <summary>
            Interface which allows extension of the KeyTip system.
            </summary>
        </member>
        <member name="M:Fluent.Extensibility.IKeyTipInformationProvider.GetKeyTipInformations(System.Boolean)">
            <summary>
            Gets a list of <see cref="T:Fluent.KeyTipInformation"/> which belong to the current instance.
            </summary>
            <param name="hide">Defines if the created <see cref="T:Fluent.KeyTip"/> should be hidden or not.</param>
            <returns>A list of <see cref="T:Fluent.KeyTipInformation"/> which belong to the current instance.</returns>
        </member>
        <member name="T:Fluent.Extensibility.IRibbonSizeChangedSink">
            <summary>
            Interface which is used to signal size changes
            </summary>
        </member>
        <member name="M:Fluent.Extensibility.IRibbonSizeChangedSink.OnSizePropertyChanged(Fluent.RibbonControlSize,Fluent.RibbonControlSize)">
            <summary>
            Called when the size is changed
            </summary>
            <param name="previous">Size before change</param>
            <param name="current">Size after change</param>
        </member>
        <member name="T:Fluent.Extensions.AutomationPeerExtensions">
            <summary>
            Extension methods for <see cref="T:System.Windows.Automation.Peers.AutomationPeer"/>.
            </summary>
        </member>
        <member name="T:Fluent.Extensions.DispatcherExtensions">
            <summary>
            Class with extension methods for <see cref="T:System.Windows.Threading.Dispatcher"/> and <see cref="T:System.Windows.Threading.DispatcherObject"/>.
            </summary>
        </member>
        <member name="T:Fluent.Extensions.FrameworkElementExtensions">
            <summary>
            Class with extension methods for <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="T:Fluent.Extensions.ICommandSourceExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Input.ICommandSource"/>.
            </summary>
        </member>
        <member name="M:Fluent.Extensions.ICommandSourceExtensions.ExecuteCommand(System.Windows.Input.ICommandSource)">
            <summary>
            Execute <see cref="P:System.Windows.Input.ICommandSource.Command"/> using <see cref="P:System.Windows.Input.ICommandSource.CommandParameter"/> and <see cref="P:System.Windows.Input.ICommandSource.CommandTarget"/>.
            </summary>
        </member>
        <member name="M:Fluent.Extensions.ICommandSourceExtensions.CanExecuteCommand(System.Windows.Input.ICommandSource)">
            <summary>
            Determines whether the <see cref="P:System.Windows.Input.ICommandSource.Command"/> can be executed using <see cref="P:System.Windows.Input.ICommandSource.CommandParameter"/> and <see cref="P:System.Windows.Input.ICommandSource.CommandTarget"/>.
            </summary>
            <returns>Returns the commands result of CanExecute.</returns>
        </member>
        <member name="T:Fluent.Extensions.ItemContainerGeneratorExtensions">
            <summary>
            Extension-Methods for <see cref="T:System.Windows.Controls.ItemContainerGenerator" />.
            </summary>
        </member>
        <member name="M:Fluent.Extensions.ItemContainerGeneratorExtensions.ContainerOrContainerContentFromItem``1(System.Windows.Controls.ItemContainerGenerator,System.Object)">
            <summary>
            Returns the container or the content of the container.
            </summary>
            <returns>
            The container for <paramref name="item" /> if the container is of type <typeparamref name="TContainerOrContent" />.
            The container content for <paramref name="item" /> if the container content is of type <typeparamref name="TContainerOrContent" />, but the container itself is not of type <typeparamref name="TContainerOrContent" />.
            </returns>
        </member>
        <member name="M:Fluent.Extensions.ItemContainerGeneratorExtensions.ContainerOrContainerContentFromIndex``1(System.Windows.Controls.ItemContainerGenerator,System.Int32)">
            <summary>
            Returns the container or the content of the container.
            </summary>
            <returns>
            The container for <paramref name="index" /> if the container is of type <typeparamref name="TContainerOrContent" />.
            The container content for <paramref name="index" /> if the container content is of type <typeparamref name="TContainerOrContent" />, but the container itself is not of type <typeparamref name="TContainerOrContent" />.
            </returns>
        </member>
        <member name="M:Fluent.Extensions.ItemContainerGeneratorExtensions.ItemFromContainerOrContainerContent(System.Windows.Controls.ItemContainerGenerator,System.Windows.DependencyObject)">
            <summary>
            asdf
            </summary>
            <returns></returns>
        </member>
        <member name="T:Fluent.Extensions.SelectorAutomationPeerExtensions">
            <summary>
            Extensions for <see cref="T:System.Windows.Automation.Peers.SelectorAutomationPeer"/>.
            </summary>
        </member>
        <member name="M:Fluent.Extensions.SelectorAutomationPeerExtensions.RaiseSelectionEvents(System.Windows.Automation.Peers.SelectorAutomationPeer,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Calls the internal method "RaiseSelectionEvents" on <paramref name="peer"/> and passes <paramref name="e"/> to it.
            </summary>
        </member>
        <member name="T:Fluent.Helpers.LogicalChildSupportHelper">
            <summary>
            Helper functions for classes implementing <see cref="T:Fluent.ILogicalChildSupport"/>.
            </summary>
        </member>
        <member name="M:Fluent.Helpers.LogicalChildSupportHelper.OnLogicalChildPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when <see cref="F:Fluent.RibbonControl.IconProperty"/> changes.
            </summary>
        </member>
        <member name="T:Fluent.Helpers.PopupHelper">
            <summary>
            Helper class to position <see cref="T:System.Windows.Controls.Primitives.Popup"/>.
            </summary>
        </member>
        <member name="P:Fluent.Helpers.PopupHelper.SimplePlacementCallback">
            <summary>
            Positions <see cref="T:System.Windows.Controls.Primitives.Popup"/> like <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Relative"/> would but ignores the value of <see cref="P:System.Windows.SystemParameters.MenuDropAlignment"/>.
            </summary>
        </member>
        <member name="M:Fluent.Helpers.PopupHelper.GetSimplePlacement(System.Windows.Size,System.Windows.Size,System.Windows.Point)">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.Primitives.CustomPopupPlacement"/> values for a <see cref="T:System.Windows.Controls.Primitives.Popup"/> like <see cref="F:System.Windows.Controls.Primitives.PlacementMode.Relative"/> would but ignores the value of <see cref="P:System.Windows.SystemParameters.MenuDropAlignment"/>.
            </summary>
        </member>
        <member name="T:Fluent.Helpers.WindowSteeringHelper">
            <summary>
            Class which offers helper methods for steering the window
            </summary>
        </member>
        <member name="M:Fluent.Helpers.WindowSteeringHelper.HandleMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs,System.Boolean,System.Boolean)">
            <summary>
            Shows the system menu at the current mouse position.
            </summary>
            <param name="e">The mouse event args.</param>
            <param name="handleDragMove">Defines if window dragging should be handled.</param>
            <param name="handleStateChange">Defines if window state changes should be handled.</param>
        </member>
        <member name="M:Fluent.Helpers.WindowSteeringHelper.HandleMouseLeftButtonDown(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventArgs,System.Boolean,System.Boolean)">
            <summary>
            Shows the system menu at the current mouse position.
            </summary>
            <param name="dependencyObject">The object which was the source of the mouse event.</param>
            <param name="e">The mouse event args.</param>
            <param name="handleDragMove">Defines if window dragging should be handled.</param>
            <param name="handleStateChange">Defines if window state changes should be handled.</param>
        </member>
        <member name="M:Fluent.Helpers.WindowSteeringHelper.ShowSystemMenu(System.Windows.DependencyObject,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Shows the system menu at the current mouse position.
            </summary>
            <param name="dependencyObject">The object which was the source of the mouse event.</param>
            <param name="e">The mouse event args.</param>
        </member>
        <member name="M:Fluent.Helpers.WindowSteeringHelper.ShowSystemMenu(System.Windows.Window,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Shows the system menu at the current mouse position.
            </summary>
            <param name="window">The window for which the system menu should be shown.</param>
            <param name="e">The mouse event args.</param>
        </member>
        <member name="M:Fluent.Helpers.WindowSteeringHelper.ShowSystemMenu(System.Windows.Window,System.Windows.Point)">
            <summary>
            Shows the system menu at <paramref name="screenLocation"/>.
            </summary>
            <param name="window">The window for which the system menu should be shown.</param>
            <param name="screenLocation">The location at which the system menu should be shown.</param>
        </member>
        <member name="T:Fluent.FrameworkHelper">
            <summary>
            Represents class to determine .NET Framework version difference
            </summary>
        </member>
        <member name="F:Fluent.FrameworkHelper.PresentationFrameworkVersion">
            <summary>
            Version of WPF
            </summary>
        </member>
        <member name="M:Fluent.FrameworkHelper.GetUseLayoutRounding(System.Windows.DependencyObject)">
            <summary>
            Gets UseLayoutRounding attached property value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.FrameworkHelper.SetUseLayoutRounding(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets UseLayoutRounding attached property value
            </summary>
        </member>
        <member name="F:Fluent.FrameworkHelper.UseLayoutRoundingProperty">
            <summary>
             Using a DependencyProperty as the backing store for UseLayoutRounding.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Fluent.ToggleButtonHelper">
            <summary>
                Helper-Class for switching states in ToggleButton-Groups
            </summary>
        </member>
        <member name="M:Fluent.ToggleButtonHelper.OnGroupNameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Handles changes to <see cref="P:Fluent.IToggleButton.GroupName" />
            </summary>
        </member>
        <member name="M:Fluent.ToggleButtonHelper.UpdateButtonGroup(Fluent.IToggleButton)">
            <summary>
                Updates the states of all buttons inside the group which <paramref name="toggleButton" /> belongs to.
            </summary>
        </member>
        <member name="M:Fluent.ToggleButtonHelper.OnIsCheckedChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
                Handles changes to <see cref="P:Fluent.IToggleButton.IsChecked" />
            </summary>
        </member>
        <member name="T:Fluent.IDropDownControl">
            <summary>
            Represents control that have drop down popup
            </summary>
        </member>
        <member name="P:Fluent.IDropDownControl.DropDownPopup">
            <summary>
            Gets drop down popup
            </summary>
        </member>
        <member name="P:Fluent.IDropDownControl.IsContextMenuOpened">
            <summary>
            Gets a value indicating whether control context menu is opened
            </summary>
        </member>
        <member name="P:Fluent.IDropDownControl.IsDropDownOpen">
            <summary>
            Gets or sets a value indicating whether drop down is opened
            </summary>
        </member>
        <member name="E:Fluent.IDropDownControl.DropDownOpened">
            <summary>
            Occurs when drop down is opened.
            </summary>
        </member>
        <member name="E:Fluent.IDropDownControl.DropDownClosed">
            <summary>
            Occurs when drop down menu is closed.
            </summary>
        </member>
        <member name="T:Fluent.IHeaderedControl">
            <summary>
            Represents a control that has a header.
            </summary>
        </member>
        <member name="P:Fluent.IHeaderedControl.Header">
            <summary>
            Gets or sets the header.
            </summary>
        </member>
        <member name="T:Fluent.IKeyTipedControl">
            <summary>
            Base interface for controls supports key tips
            </summary>
        </member>
        <member name="P:Fluent.IKeyTipedControl.KeyTip">
            <summary>
            Gets and sets KeyTip for element.
            </summary>
        </member>
        <member name="M:Fluent.IKeyTipedControl.OnKeyTipPressed">
            <summary>
            Handles key tip pressed
            </summary>
        </member>
        <member name="M:Fluent.IKeyTipedControl.OnKeyTipBack">
            <summary>
            Handles back navigation with KeyTips
            </summary>
        </member>
        <member name="T:Fluent.ILargeIconProvider">
            <summary>
            Inferface for controls which provide a large icon.
            </summary>
        </member>
        <member name="P:Fluent.ILargeIconProvider.LargeIcon">
            <summary>
            Gets or sets the large icon.
            </summary>
        </member>
        <member name="T:Fluent.LargeIconProviderProperties">
            <summary>
            Provides some <see cref="T:System.Windows.DependencyProperty"/> for <see cref="T:Fluent.ILargeIconProvider"/>.
            </summary>
        </member>
        <member name="F:Fluent.LargeIconProviderProperties.LargeIconProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for <see cref="P:Fluent.ILargeIconProvider.LargeIcon"/>.
            </summary>
        </member>
        <member name="T:Fluent.ILogicalChildSupport">
            <summary>
            Adds support for forwarding AddLogicalChild and RemoveLogicalChild.
            </summary>
        </member>
        <member name="M:Fluent.ILogicalChildSupport.AddLogicalChild(System.Object)">
            <summary>Adds the provided object to the logical tree of this element. </summary>
            <param name="child">Child element to be added.</param>
        </member>
        <member name="M:Fluent.ILogicalChildSupport.RemoveLogicalChild(System.Object)">
            <summary>
                Removes the provided object from this element's logical tree. <see cref="T:System.Windows.FrameworkElement" />
                updates the affected logical tree parent pointers to keep in sync with this deletion.
            </summary>
            <param name="child">The element to remove.</param>
        </member>
        <member name="T:Fluent.IMediumIconProvider">
            <summary>
            Inferface for controls which provide a medium icon.
            </summary>
        </member>
        <member name="P:Fluent.IMediumIconProvider.MediumIcon">
            <summary>
            Gets or sets the medium icon.
            </summary>
        </member>
        <member name="T:Fluent.MediumIconProviderProperties">
            <summary>
            Provides some <see cref="T:System.Windows.DependencyProperty"/> for <see cref="T:Fluent.IMediumIconProvider"/>.
            </summary>
        </member>
        <member name="F:Fluent.MediumIconProviderProperties.MediumIconProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for <see cref="P:Fluent.IMediumIconProvider.MediumIcon"/>.
            </summary>
        </member>
        <member name="T:Fluent.Internal.CommandHelper">
            <summary>
            Helper class for <see cref="T:System.Windows.Input.ICommand"/>
            </summary>
        </member>
        <member name="M:Fluent.Internal.CommandHelper.CanExecute(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Checks if <paramref name="command"/> can be executed.
            This method is <c>null</c> safe.
            </summary>
            <returns><c>true</c> if the command can be executed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Fluent.Internal.CommandHelper.Execute(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Executes <paramref name="command"/>.
            This method is <c>null</c> safe.
            </summary>
        </member>
        <member name="M:Fluent.Internal.DoubleUtil.AreClose(System.Double,System.Double)">
            <summary>
            AreClose - Returns whether or not two doubles are "close".  That is, whether or
            not they are within epsilon of each other.  Note that this epsilon is proportional
            to the numbers themselves to that AreClose survives scalar multiplication.
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the AreClose comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="M:Fluent.Internal.DoubleUtil.GreaterThan(System.Double,System.Double)">
            <summary>
            GreaterThan - Returns whether or not the first double is greater than the second double.
            That is, whether or not the first is strictly greater than *and* not within epsilon of
            the other number.  Note that this epsilon is proportional to the numbers themselves
            to that AreClose survives scalar multiplication.  Note,
            There are plenty of ways for this to return false even for numbers which
            are theoretically identical, so no code calling this should fail to work if this
            returns false.  This is important enough to repeat:
            NB: NO CODE CALLING THIS FUNCTION SHOULD DEPEND ON ACCURATE RESULTS - this should be
            used for optimizations *only*.
            </summary>
            <returns>
            bool - the result of the GreaterThan comparision.
            </returns>
            <param name="value1"> The first double to compare. </param>
            <param name="value2"> The second double to compare. </param>
        </member>
        <member name="T:Fluent.Internal.ItemContainerGeneratorAction">
            <summary>
            Helper class used to queue action for completion or items changes of <see cref="T:System.Windows.Controls.ItemContainerGenerator"/>
            </summary>
        </member>
        <member name="M:Fluent.Internal.ItemContainerGeneratorAction.#ctor(System.Windows.Controls.ItemContainerGenerator,System.Action)">
            <summary>
            Creates a new instance used to queue action for completion or items changes of <see cref="T:System.Windows.Controls.ItemContainerGenerator"/>
            </summary>
            <param name="generator">The <see cref="T:System.Windows.Controls.ItemContainerGenerator"/> to be used.</param>
            <param name="action">The <see cref="T:System.Action"/> that should be invoked.</param>
        </member>
        <member name="P:Fluent.Internal.ItemContainerGeneratorAction.Generator">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.ItemContainerGenerator"/> to be used.
            </summary>
        </member>
        <member name="P:Fluent.Internal.ItemContainerGeneratorAction.Action">
            <summary>
            Gets the <see cref="T:System.Action"/> that should be invoked.
            </summary>
        </member>
        <member name="P:Fluent.Internal.ItemContainerGeneratorAction.IsWaitingForGenerator">
            <summary>
            Gets the current wait state. <c>true</c> in case <see cref="M:Fluent.Internal.ItemContainerGeneratorAction.QueueAction"/> was called and we are waiting for the <see cref="P:Fluent.Internal.ItemContainerGeneratorAction.Generator"/> to finish.
            </summary>
        </member>
        <member name="M:Fluent.Internal.ItemContainerGeneratorAction.QueueAction">
            <summary>
            Queues <see cref="P:Fluent.Internal.ItemContainerGeneratorAction.Action"/> for invocation.
            </summary>
        </member>
        <member name="T:Fluent.Internal.KnownBoxes.BooleanBoxes">
            <summary>
            Class containing boxed values for <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.BooleanBoxes.TrueBox">
            <summary>
            Gets a boxed value for <c>true</c>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.BooleanBoxes.FalseBox">
            <summary>
            Gets a boxed value for <c>true</c>.
            </summary>
        </member>
        <member name="M:Fluent.Internal.KnownBoxes.BooleanBoxes.Box(System.Boolean)">
            <summary>
            Gets a boxed value for <paramref name="value"/>.
            </summary>
            <returns>A boxed <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="M:Fluent.Internal.KnownBoxes.BooleanBoxes.Box(System.Nullable{System.Boolean})">
            <summary>
            Gets a boxed value for <paramref name="value"/>.
            </summary>
            <returns>A boxed nullable <see cref="T:System.Boolean"/> value.</returns>
        </member>
        <member name="T:Fluent.Internal.KnownBoxes.DoubleBoxes">
            <summary>
            Class containing boxed values for <see cref="T:System.Double"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.DoubleBoxes.Zero">
            <summary>
            Gets a boxed value for <c>0D</c>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.DoubleBoxes.NaN">
            <summary>
            Gets a boxed value for <see cref="F:System.Double.NaN"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.DoubleBoxes.MaxValue">
            <summary>
            Gets a boxed value for <see cref="F:System.Double.MaxValue"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.DoubleBoxes.One">
            <summary>
            Gets a boxed value for <c>1D</c>.
            </summary>
        </member>
        <member name="T:Fluent.Internal.KnownBoxes.IconSizeBoxes">
            <summary>
            Class containing boxed values for <see cref="T:Fluent.IconSize"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IconSizeBoxes.Small">
            <summary>
            Gets a boxed value for <see cref="F:Fluent.IconSize.Small"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IconSizeBoxes.Medium">
            <summary>
            Gets a boxed value for <see cref="F:Fluent.IconSize.Medium"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IconSizeBoxes.Large">
            <summary>
            Gets a boxed value for <see cref="F:Fluent.IconSize.Large"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IconSizeBoxes.Custom">
            <summary>
            Gets a boxed value for <see cref="F:Fluent.IconSize.Custom"/>.
            </summary>
        </member>
        <member name="M:Fluent.Internal.KnownBoxes.IconSizeBoxes.Box(Fluent.IconSize)">
            <summary>
            Gets a boxed value for <see cref="T:Fluent.IconSize"/>.
            </summary>
        </member>
        <member name="T:Fluent.Internal.KnownBoxes.IntBoxes">
            <summary>
            Class containing boxed values for <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IntBoxes.Zero">
            <summary>
            Gets a boxed value for <c>0</c>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IntBoxes.One">
            <summary>
            Gets a boxed value for <c>1</c>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.IntBoxes.MaxValue">
            <summary>
            Gets a boxed value for <see cref="F:System.Int32.MaxValue"/>.
            </summary>
        </member>
        <member name="T:Fluent.Internal.KnownBoxes.StringBoxes">
            <summary>
            Class containing boxed values for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.StringBoxes.Empty">
            <summary>
            Gets a boxed value for <see cref="F:System.String.Empty"/>.
            </summary>
        </member>
        <member name="T:Fluent.Internal.KnownBoxes.VisibilityBoxes">
            <summary>
            Class containing boxed values for <see cref="T:System.Windows.Visibility"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.VisibilityBoxes.Visible">
            <summary>
            Gets a boxed value for <see cref="F:System.Windows.Visibility.Visible"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.VisibilityBoxes.Hidden">
            <summary>
            Gets a boxed value for <see cref="F:System.Windows.Visibility.Hidden"/>.
            </summary>
        </member>
        <member name="F:Fluent.Internal.KnownBoxes.VisibilityBoxes.Collapsed">
            <summary>
            Gets a boxed value for <see cref="F:System.Windows.Visibility.Collapsed"/>.
            </summary>
        </member>
        <member name="M:Fluent.Internal.KnownBoxes.VisibilityBoxes.Box(System.Windows.Visibility)">
            <summary>
            Gets a boxed value for <paramref name="value"/>.
            </summary>
            <returns>A boxed <see cref="T:System.Windows.Visibility"/> value.</returns>
        </member>
        <member name="T:Fluent.Internal.ScopeGuard">
            <summary>
            Scope guard to prevent reentrancy.
            </summary>
        </member>
        <member name="M:Fluent.Internal.ScopeGuard.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:Fluent.Internal.ScopeGuard.#ctor(System.Action,System.Action)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="onEntry">Action being called on entry.</param>
            <param name="onDispose">Action being called on dispose.</param>
        </member>
        <member name="P:Fluent.Internal.ScopeGuard.IsActive">
            <summary>
            Gets whether this instance is still active (not disposed) or not.
            </summary>
        </member>
        <member name="M:Fluent.Internal.ScopeGuard.Start">
            <summary>
            Starts the scope guard.
            </summary>
            <returns>The current instance for fluent usage.</returns>
        </member>
        <member name="M:Fluent.Internal.ScopeGuard.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Internal.UIHelper">
            <summary>
            Class with helper functions for UI related stuff
            </summary>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetFirstVisualChild(System.Windows.DependencyObject)">
            <summary>
            Gets the first visual child of <paramref name="parent"/>.
            If there are no visual children <c>null</c> is returned.
            </summary>
            <returns>The first visual child of <paramref name="parent"/> or <c>null</c> if there are no children.</returns>
        </member>
        <member name="M:Fluent.Internal.UIHelper.FindImmediateVisualChild``1(System.Windows.DependencyObject,System.Predicate{``0})">
            <summary>
            Tries to find immediate visual child of type <typeparamref name="T"/> which matches <paramref name="predicate"/>
            </summary>
            <returns>
            The visual child of type <typeparamref name="T"/> that matches <paramref name="predicate"/>.
            Returns <c>null</c> if no child matches.
            </returns>
        </member>
        <member name="M:Fluent.Internal.UIHelper.FindVisualChild``1(System.Windows.DependencyObject)">
            <summary>
            Gets the first visual child of type TChildItem by walking down the visual tree.
            </summary>
            <typeparam name="TChildItem">The type of visual child to find.</typeparam>
            <param name="parent">The parent element whose visual tree shall be walked down.</param>
            <returns>The first element of type TChildItem found in the visual tree is returned. If none is found, null is returned.</returns>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Gets all visual children of <paramref name="parent"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetParent``1(System.Windows.DependencyObject,System.Predicate{``0})">
            <summary>
            Finds the parent control of type <typeparamref name="T"/>.
            First looks at the visual tree and then at the logical tree to find the parent.
            </summary>
            <returns>The found visual/logical parent or null.</returns>
            <remarks>This method searches further up the parent chain instead of just using the immediate parent.</remarks>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetVisualOrLogicalParent(System.Windows.DependencyObject)">
            <summary>
            Returns either the visual or logical parent of <paramref name="element"/>.
            This also works for <see cref="T:System.Windows.ContentElement"/> and <see cref="T:System.Windows.FrameworkContentElement"/>.
            </summary>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetVisualParent(System.Windows.DependencyObject)">
            <summary>
            Returns the visual parent of <paramref name="element"/>.
            This also works for <see cref="T:System.Windows.ContentElement"/> and <see cref="T:System.Windows.FrameworkContentElement"/>.
            </summary>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetAdornerLayer(System.Windows.Media.Visual)">
            <summary>
            First checks if <paramref name="visual"/> is either a <see cref="T:System.Windows.Documents.AdornerDecorator"/> or <see cref="T:System.Windows.Controls.ScrollContentPresenter"/> and if it is returns it's <see cref="T:System.Windows.Documents.AdornerLayer"/>.
            If those checks yield no result <see cref="M:System.Windows.Documents.AdornerLayer.GetAdornerLayer(System.Windows.Media.Visual)"/> is called.
            </summary>
            <param name="visual">The visual element for which to find an adorner layer.</param>
            <returns>An adorner layer for the specified visual, or null if no adorner layer can be found.</returns>
            <exception cref="T:System.ArgumentNullException">Raised when visual is null.</exception>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetAllItemContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets all containers from the <see cref="T:System.Windows.Controls.ItemContainerGenerator"/> of <paramref name="itemsControl"/>.
            </summary>
            <typeparam name="T">The desired container type.</typeparam>
        </member>
        <member name="M:Fluent.Internal.UIHelper.GetAllItemContainers``1(System.Windows.Controls.ItemContainerGenerator)">
            <summary>
            Gets all containers from <paramref name="itemContainerGenerator"/>.
            </summary>
            <typeparam name="T">The desired container type.</typeparam>
        </member>
        <member name="T:Fluent.Internal.WhenLoaded">
            <summary>
            Executes action on framework element when it's loaded.
            </summary>
            <remarks>
            Action is execued only once, no matter how many times Loaded event is fired.
            </remarks>
        </member>
        <member name="T:Fluent.Internal.WhenLoadedExtension">
            <summary>
            <see cref="M:Fluent.Internal.WhenLoadedExtension.WhenLoaded(System.Windows.FrameworkElement,System.Action{System.Windows.FrameworkElement})"/> class wrapper to add clarity to the code.
            </summary>
        </member>
        <member name="M:Fluent.Internal.WhenLoadedExtension.WhenLoaded(System.Windows.FrameworkElement,System.Action{System.Windows.FrameworkElement})">
            <summary>
            Executes given action only if framework element is loaded. Otherwise waits until framework element
            is loaded and executes the action.
            </summary>
            <param name="frameworkElement">Target framework element which we want to be loaded.</param>
            <param name="loadedAction">Action to be executed when framework element is loaded.</param>
            <remarks>Action is executed only once.</remarks>
        </member>
        <member name="T:Fluent.IRibbonControl">
            <summary>
            Base interface for Fluent controls
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.Size">
            <summary>
            Gets or sets Size for the element
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.SizeDefinition">
            <summary>
            Gets or sets SizeDefinition for element
            </summary>
        </member>
        <member name="P:Fluent.IRibbonControl.Icon">
            <summary>
            Gets or sets Icon for the element
            </summary>
        </member>
        <member name="T:Fluent.IRibbonStateStorage">
            <summary>
            Interface for handling loading and saving the state of a <see cref="T:Fluent.Ribbon"/>.
            </summary>
        </member>
        <member name="P:Fluent.IRibbonStateStorage.IsLoading">
            <summary>
            Gets whether state is currently loading.
            </summary>
        </member>
        <member name="P:Fluent.IRibbonStateStorage.IsLoaded">
            <summary>
            Gets or sets whether state is loaded.
            </summary>
        </member>
        <member name="M:Fluent.IRibbonStateStorage.SaveTemporary">
            <summary>
            Save current state to a temporary storage.
            </summary>
        </member>
        <member name="M:Fluent.IRibbonStateStorage.Save">
            <summary>
            Save current state to a persistent storage.
            </summary>
        </member>
        <member name="M:Fluent.IRibbonStateStorage.LoadTemporary">
            <summary>
            Load state from a temporary storage.
            </summary>
        </member>
        <member name="M:Fluent.IRibbonStateStorage.Load">
            <summary>
            Loads the state from a persistent storage.
            </summary>
            <remarks>
            Sets <see cref="P:Fluent.RibbonStateStorage.IsLoaded" /> after it's finished to prevent a race condition with saving the state to the temporary storage.
            </remarks>
        </member>
        <member name="M:Fluent.IRibbonStateStorage.Reset">
            <summary>
            Resets saved state.
            </summary>
        </member>
        <member name="T:Fluent.IRibbonWindow">
            <summary>
            Meant to support interop scenarios
            </summary>
        </member>
        <member name="P:Fluent.IRibbonWindow.TitleBar">
            <summary>
            Gets the titlebar
            </summary>
        </member>
        <member name="T:Fluent.IScalableRibbonControl">
            <summary>
            Repesents scalable ribbon contol
            </summary>
        </member>
        <member name="M:Fluent.IScalableRibbonControl.ResetScale">
            <summary>
            Resets the scale.
            </summary>
        </member>
        <member name="M:Fluent.IScalableRibbonControl.Enlarge">
            <summary>
            Enlarge control size.
            </summary>
        </member>
        <member name="M:Fluent.IScalableRibbonControl.Reduce">
            <summary>
            Reduce control size.
            </summary>
        </member>
        <member name="E:Fluent.IScalableRibbonControl.Scaled">
            <summary>
            Occurs when contol is scaled.
            </summary>
        </member>
        <member name="T:Fluent.ISimplifiedRibbonControl">
            <summary>
            Base interface for controls supports simplified state
            </summary>
        </member>
        <member name="P:Fluent.ISimplifiedRibbonControl.SimplifiedSizeDefinition">
            <summary>
            Gets or sets SimplifiedSizeDefinition for element on Simplified mode
            </summary>
        </member>
        <member name="P:Fluent.ISimplifiedRibbonControl.IsSimplified">
            <summary>
            Gets or sets whether or not the ribbon is in Simplified mode
            </summary>
        </member>
        <member name="T:Fluent.ISimplifiedStateControl">
            <summary>
            Base interface for controls requiring simplified state
            </summary>
        </member>
        <member name="M:Fluent.ISimplifiedStateControl.UpdateSimplifiedState(System.Boolean)">
            <summary>
            Update simplified state.
            </summary>
        </member>
        <member name="T:Fluent.IToggleButton">
            <summary>
            Interface for controls that support <see cref="T:Fluent.ToggleButton"/>-Behavior
            </summary>
        </member>
        <member name="P:Fluent.IToggleButton.GroupName">
            <summary>
            Gets or sets the name of the group that the toggle button belongs to.
            Use the GroupName property to specify a grouping of toggle buttons to
            create a mutually exclusive set of controls. You can use the GroupName
            property when only one selection is possible from a list of available
            options. When this property is set, only one ToggleButton in the specified
            group can be selected at a time.
            </summary>
        </member>
        <member name="P:Fluent.IToggleButton.IsChecked">
            <summary>
            Gets or sets a value indicating whether SplitButton is checked
            </summary>
        </member>
        <member name="P:Fluent.IToggleButton.IsLoaded">
            <summary>
            Gets a value indicating whether the ToggleButton is fully loaded
            </summary>
        </member>
        <member name="P:Fluent.IToggleButton.Parent">
            <summary>Gets the logical parent  element of this element. </summary>
            <returns>This element's logical parent.</returns>
        </member>
        <member name="T:Fluent.Localization.RibbonLocalizationAttribute">
            <summary>
            Attribute class providing informations about a localization
            </summary>
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationAttribute.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="displayName">Specifies the display name.</param>
            <param name="cultureName">Specifies the culture name.</param>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationAttribute.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationAttribute.CultureName">
            <summary>
            Gets the culture name.
            </summary>
        </member>
        <member name="T:Fluent.Localization.RibbonLocalizationBase">
            <summary>
            Base class for localizations.
            </summary>
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.#ctor">
            <summary>
            Creates a new instance and initializes <see cref="P:Fluent.Localization.RibbonLocalizationBase.CultureName"/> and <see cref="P:Fluent.Localization.RibbonLocalizationBase.DisplayName"/> from <see cref="T:Fluent.Localization.RibbonLocalizationAttribute"/>.
            </summary>
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.CultureName">
            <summary>
            Gets or sets the culture name.
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.DisplayName">
            <summary>
            Gets or sets the display name.
            </summary>
        </member>
        <member name="F:Fluent.Localization.RibbonLocalizationBase.FallbackLocalization">
            <summary>
            Fallback instance of <see cref="T:Fluent.Localization.Languages.English"/> for localization.
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.Automatic">
            <summary>
            Gets text for representing "Automatic"
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.BackstageButtonKeyTip">
            <summary>
            Gets KeyTip of backstage button
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.BackstageButtonText">
            <summary>
            Gets text of backstage button
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.CustomizeStatusBar">
            <summary>
            Gets customize Status Bar
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.MoreColors">
            <summary>
            Gets text for representing "More colors..."
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.NoColor">
            <summary>
            Gets text for representing "No color"
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.QuickAccessToolBarDropDownButtonTooltip">
            <summary>
            Quick Access ToolBar DropDown Button ToolTip
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.QuickAccessToolBarMenuHeader">
            <summary>
            Quick Access ToolBar  Menu Header
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.QuickAccessToolBarMenuShowAbove">
            <summary>
            Quick Access ToolBar Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.QuickAccessToolBarMenuShowBelow">
            <summary>
            Quick Access ToolBar Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.QuickAccessToolBarMoreControlsButtonTooltip">
            <summary>
            Quick Access ToolBar MoreControls Button ToolTip
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuAddGallery">
            <summary>
            Quick Access ToolBar Menu Add Gallery
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuAddGroup">
            <summary>
            Quick Access ToolBar Menu Add Group
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuAddItem">
            <summary>
            Quick Access ToolBar Menu Add Item
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuAddMenu">
            <summary>
            Quick Access ToolBar Menu Add Menu
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuCustomizeQuickAccessToolBar">
            <summary>
            Ribbon Context Menu Customize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuCustomizeRibbon">
            <summary>
            Ribbon Context Menu Customize the ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuMinimizeRibbon">
            <summary>
            Ribbon Context Menu Minimize the ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuRemoveItem">
            <summary>
            Quick Access ToolBar Menu Remove Item
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuShowAbove">
            <summary>
            Ribbon Context Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonContextMenuShowBelow">
            <summary>
            Ribbon Context Menu Minimize Quick Access Toolbar
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.ShowRibbon">
            <summary>
            Show Ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.ExpandRibbon">
            <summary>
            Expand Ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.MinimizeRibbon">
            <summary>
            Minimize Ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.RibbonLayout">
            <summary>
            Ribbon Layout
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.UseClassicRibbon">
            <summary>
            Use classic Ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.UseSimplifiedRibbon">
            <summary>
            Use simplified Ribbon
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.DisplayOptionsButtonScreenTipTitle">
            <summary>
            DisplayOptions Button ScreenTip Title
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.DisplayOptionsButtonScreenTipText">
            <summary>
            DisplayOptions Button ScreenTip Text
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.ScreenTipDisableReasonHeader">
            <summary>
            Gets ScreenTip's disable reason header
            </summary>
        </member>
        <member name="P:Fluent.Localization.RibbonLocalizationBase.ScreenTipF1LabelHeader">
            <summary>
            Gets ScreenTip's disable reason header
            </summary>
        </member>
        <member name="E:Fluent.Localization.RibbonLocalizationBase.PropertyChanged">
            <summary>
            Change notifications are not implemented.
            This class only implements <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> to prevent WPF from trying to listen to changes by using other ways than listening for this event.
            </summary>
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.Equals(Fluent.Localization.RibbonLocalizationBase)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.op_Equality(Fluent.Localization.RibbonLocalizationBase,Fluent.Localization.RibbonLocalizationBase)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Fluent.Localization.RibbonLocalizationBase.op_Inequality(Fluent.Localization.RibbonLocalizationBase,Fluent.Localization.RibbonLocalizationBase)">
            <summary>
            
            </summary>
        </member>
        <member name="T:Fluent.RibbonLocalization">
            <summary>
            Contains localizable Ribbon's properties.
            Set Culture property to change current Ribbon localization or
            set properties independently to use your localization
            </summary>
        </member>
        <member name="E:Fluent.RibbonLocalization.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:Fluent.RibbonLocalization.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:Fluent.RibbonLocalization.PropertyChanged"/> event.
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.Current">
            <summary>
            Static instance of <see cref="T:Fluent.RibbonLocalization"/> to ease it's usage in XAML.
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.LocalizationMap">
            <summary>
            Gets a map of all registered localization classes.
            </summary>
            <remarks>
            The key of items in this dictionary should be the CultureName.
            </remarks>
        </member>
        <member name="P:Fluent.RibbonLocalization.Culture">
            <summary>
            Gets or sets current culture used for localization.
            </summary>
        </member>
        <member name="P:Fluent.RibbonLocalization.Localization">
            <summary>
            Gets or sets the current localization.
            </summary>
        </member>
        <member name="M:Fluent.RibbonLocalization.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Fluent.Metro.Behaviours.StylizedBehaviors">
            <summary>
            Enables the use of behaviors in styles
            </summary>
        </member>
        <member name="F:Fluent.Metro.Behaviours.StylizedBehaviors.BehaviorsProperty">
            <summary>
            <see cref="T:System.Windows.DependencyProperty"/> for behaviors.
            </summary>
        </member>
        <member name="M:Fluent.Metro.Behaviours.StylizedBehaviors.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Gets the behaviors associated with <paramref name="dpo"/>
            </summary>
        </member>
        <member name="M:Fluent.Metro.Behaviours.StylizedBehaviors.SetBehaviors(System.Windows.DependencyObject,Fluent.Metro.Behaviours.StylizedBehaviorCollection)">
            <summary>
            Sets the behaviors associated with <paramref name="dpo"/>
            </summary>
        </member>
        <member name="T:Fluent.Metro.Behaviours.StylizedBehaviorCollection">
            <summary>
            Just a <see cref="T:System.Windows.FreezableCollection`1"/> for <see cref="T:Microsoft.Xaml.Behaviors.Behavior"/>
            </summary>
        </member>
        <member name="M:Fluent.Metro.Behaviours.StylizedBehaviorCollection.CreateInstanceCore">
            <inheritdoc />
        </member>
        <member name="T:Fluent.WindowCommands">
            <summary>
            Contains commands for <see cref="T:Fluent.RibbonWindow"/>
            </summary>
        </member>
        <member name="M:Fluent.WindowCommands.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Fluent.WindowCommands"/> class.
            </summary>
        </member>
        <member name="M:Fluent.WindowCommands.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Fluent.WindowCommands.Dispose(System.Boolean)">
            <summary>
            Dispose(bool disposing) executes in two distinct scenarios.
            If disposing equals true, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            If disposing equals false, the method has been called by the
            runtime from inside the finalizer and you should not reference
            other objects. Only unmanaged resources can be disposed.
            </summary>
        </member>
        <member name="P:Fluent.WindowCommands.Minimize">
            <summary>
            Retrieves the translated string for Minimize
            </summary>
        </member>
        <member name="P:Fluent.WindowCommands.Maximize">
            <summary>
            Retrieves the translated string for Maximize
            </summary>
        </member>
        <member name="P:Fluent.WindowCommands.Restore">
            <summary>
            Retrieves the translated string for Restore
            </summary>
        </member>
        <member name="P:Fluent.WindowCommands.Close">
            <summary>
            Retrieves the translated string for Close
            </summary>
        </member>
        <member name="P:Fluent.WindowCommands.ItemsControl">
            <summary>
            Gets the <see cref="T:System.Windows.Controls.ItemsControl"/> responsible for showing <see cref="P:System.Windows.Controls.ItemsControl.Items"/>.
            </summary>
        </member>
        <member name="F:Fluent.WindowCommands.ItemsPanelVisibilityProperty">
            <summary>Identifies the <see cref="P:Fluent.WindowCommands.ItemsPanelVisibility"/> dependency property.</summary>
        </member>
        <member name="P:Fluent.WindowCommands.ItemsPanelVisibility">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Visibility"/> of the panel which contains <see cref="P:System.Windows.Controls.ItemsControl.Items"/>.
            </summary>
        </member>
        <member name="P:Fluent.WindowCommands.ButtonBrush">
            <summary>
            Gets or sets the button brush
            </summary>
        </member>
        <member name="F:Fluent.WindowCommands.ButtonBrushProperty">
            <summary>Identifies the <see cref="P:Fluent.WindowCommands.ButtonBrush"/> dependency property.</summary>
        </member>
        <member name="M:Fluent.WindowCommands.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:Fluent.WindowCommands.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.RibbonCommands">
            <summary>
            Class for several commands belonging to the Ribbon
            </summary>
        </member>
        <member name="F:Fluent.RibbonCommands.OpenBackstage">
            <summary>
            Gets the value that represents the Open Backstage command
            </summary>
        </member>
        <member name="T:Fluent.ContextMenuService">
            <summary>
            Represents additional context menu service
            </summary>
        </member>
        <member name="M:Fluent.ContextMenuService.Attach(System.Type)">
            <summary>
            Attach needed parameters to control
            </summary>
        </member>
        <member name="M:Fluent.ContextMenuService.CoerceContextMenu(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the ContextMenu for <paramref name="d"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Fluent.ContextMenuService.Coerce(System.Windows.DependencyObject)">
            <summary>
            Coerce control context menu
            </summary>
        </member>
        <member name="T:Fluent.KeyTipService">
            <summary>
            Handles Alt, F10 and so on
            </summary>
        </member>
        <member name="P:Fluent.KeyTipService.AreAnyKeyTipsVisible">
            <summary>
            Checks if any keytips are visible.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipService.DefaultKeyTipKeys">
            <summary>
            The default keys used to activate key tips.
            </summary>
        </member>
        <member name="P:Fluent.KeyTipService.KeyTipKeys">
            <summary>
            List of key tip activation keys.
            </summary>
        </member>
        <member name="M:Fluent.KeyTipService.#ctor(Fluent.Ribbon)">
            <summary>
            Default constrctor
            </summary>
            <param name="ribbon">Host element</param>
        </member>
        <member name="M:Fluent.KeyTipService.Attach">
            <summary>
            Attaches self
            </summary>
        </member>
        <member name="M:Fluent.KeyTipService.Detach">
            <summary>
            Detachs self
            </summary>
        </member>
        <member name="T:Fluent.DismissPopupMode">
            <summary>
            Dismiss popup mode.
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupMode.Always">
            <summary>
            Always dismiss popup.
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupMode.MouseNotOver">
            <summary>
            Dismiss only if mouse is not over popup.
            </summary>
        </member>
        <member name="T:Fluent.DismissPopupReason">
            <summary>
            Reason for dismiss popup event.
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupReason.Undefined">
            <summary>
            No reason given.
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupReason.ApplicationLostFocus">
            <summary>
            Application lost focus.
            </summary>
        </member>
        <member name="F:Fluent.DismissPopupReason.ShowingKeyTips">
            <summary>
            Showing key tips.
            </summary>
        </member>
        <member name="T:Fluent.DismissPopupEventArgs">
            <summary>
            Dismiss popup arguments.
            </summary>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.#ctor">
            <summary>
            Standard constructor.
            </summary>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.#ctor(Fluent.DismissPopupMode)">
            <summary>
            Constructor.
            </summary>
            <param name="dismissMode">Dismiss mode.</param>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.#ctor(Fluent.DismissPopupMode,Fluent.DismissPopupReason)">
            <summary>
            Constructor.
            </summary>
            <param name="dismissMode">Dismiss mode.</param>
            <param name="reason">Dismiss reason.</param>
        </member>
        <member name="P:Fluent.DismissPopupEventArgs.DismissMode">
            <summary>
            Popup dismiss mode.
            </summary>
        </member>
        <member name="P:Fluent.DismissPopupEventArgs.DismissReason">
            <summary>
            Popup dismiss reason.
            </summary>
        </member>
        <member name="M:Fluent.DismissPopupEventArgs.InvokeEventHandler(System.Delegate,System.Object)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.PopupService">
            <summary>
            Represent additional popup functionality
            </summary>
        </member>
        <member name="F:Fluent.PopupService.DismissPopupEvent">
            <summary>
            Occurs then popup is dismissed
            </summary>
        </member>
        <member name="M:Fluent.PopupService.RaiseDismissPopupEventAsync(System.Object,Fluent.DismissPopupMode,Fluent.DismissPopupReason)">
            <summary>
            Raises DismissPopup event (Async)
            </summary>
        </member>
        <member name="M:Fluent.PopupService.RaiseDismissPopupEvent(System.Object,Fluent.DismissPopupMode,Fluent.DismissPopupReason)">
            <summary>
            Raises DismissPopup event
            </summary>
        </member>
        <member name="M:Fluent.PopupService.Attach(System.Type)">
            <summary>
            Set needed parameters to control
            </summary>
            <param name="classType">Control type</param>
        </member>
        <member name="M:Fluent.PopupService.OnClickThroughThunk(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles PreviewMouseDownOutsideCapturedElementEvent event
            </summary>
        </member>
        <member name="M:Fluent.PopupService.OnLostMouseCapture(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            Handles lost mouse capture event
            </summary>
        </member>
        <member name="M:Fluent.PopupService.IsAncestorOf(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Returns true whether parent is ancestor of element
            </summary>
            <param name="parent">Parent</param>
            <param name="element">Element</param>
            <returns>Returns true whether parent is ancestor of element</returns>
        </member>
        <member name="M:Fluent.PopupService.OnDismissPopup(System.Object,Fluent.DismissPopupEventArgs)">
            <summary>
            Handles dismiss popup event
            </summary>
        </member>
        <member name="M:Fluent.PopupService.IsMousePhysicallyOver(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Returns true whether mouse is physically over the popup
            </summary>
            <param name="popup">Element</param>
            <returns>Returns true whether mouse is physically over the popup</returns>
        </member>
        <member name="M:Fluent.PopupService.IsMousePhysicallyOver(System.Windows.UIElement)">
            <summary>
            Returns true whether mouse is physically over the element
            </summary>
            <param name="element">Element</param>
            <returns>Returns true whether mouse is physically over the element</returns>
        </member>
        <member name="M:Fluent.PopupService.OnContextMenuOpening(System.Object,System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Handles context menu opening event
            </summary>
        </member>
        <member name="M:Fluent.PopupService.OnContextMenuClosing(System.Object,System.Windows.Controls.ContextMenuEventArgs)">
            <summary>
            Handles context menu closing event
            </summary>
        </member>
        <member name="T:Fluent.ToolTipService">
            <summary>
            Provides additional tooltip functionality.
            </summary>
        </member>
        <member name="M:Fluent.ToolTipService.Attach(System.Type)">
            <summary>
            Attach ooltip properties to control.
            </summary>
            <param name="type">Control type.</param>
        </member>
        <member name="T:Fluent.StyleSelectors.ApplicationMenuItemContainerStyleSelector">
            <summary>
            <see cref="T:System.Windows.Controls.StyleSelector"/> for <see cref="P:System.Windows.Controls.ItemsControl.ItemContainerStyle"/> in <see cref="T:Fluent.ApplicationMenu"/>.
            </summary>
        </member>
        <member name="P:Fluent.StyleSelectors.ApplicationMenuItemContainerStyleSelector.Instance">
            <summary>
                A singleton instance for <see cref="T:Fluent.StyleSelectors.ApplicationMenuItemContainerStyleSelector" />.
            </summary>
        </member>
        <member name="M:Fluent.StyleSelectors.ApplicationMenuItemContainerStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.StyleSelectors.BackstageTabControlItemContainerStyleSelector">
            <summary>
            <see cref="T:System.Windows.Controls.StyleSelector"/> for <see cref="P:System.Windows.Controls.ItemsControl.ItemContainerStyle"/> in <see cref="T:Fluent.BackstageTabControl"/>.
            </summary>
        </member>
        <member name="P:Fluent.StyleSelectors.BackstageTabControlItemContainerStyleSelector.Instance">
            <summary>
                A singleton instance for <see cref="T:Fluent.StyleSelectors.BackstageTabControlItemContainerStyleSelector" />.
            </summary>
        </member>
        <member name="M:Fluent.StyleSelectors.BackstageTabControlItemContainerStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.StyleSelectors.HeaderApplicationMenuItemItemContainerStyleSelector">
            <summary>
            <see cref="T:System.Windows.Controls.StyleSelector"/> for <see cref="P:System.Windows.Controls.ItemsControl.ItemContainerStyle"/> in <see cref="T:Fluent.MenuItem"/> with style HeaderApplicationMenuItemTemplate.
            </summary>
        </member>
        <member name="P:Fluent.StyleSelectors.HeaderApplicationMenuItemItemContainerStyleSelector.Instance">
            <summary>
                A singleton instance for <see cref="T:Fluent.StyleSelectors.HeaderApplicationMenuItemItemContainerStyleSelector" />.
            </summary>
        </member>
        <member name="M:Fluent.StyleSelectors.HeaderApplicationMenuItemItemContainerStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.StyleSelectors.SplitedApplicationMenuItemItemContainerStyleSelector">
            <summary>
            <see cref="T:System.Windows.Controls.StyleSelector"/> for <see cref="P:System.Windows.Controls.ItemsControl.ItemContainerStyle"/> in <see cref="T:Fluent.MenuItem"/> with style SplitedApplicationMenuItem.
            </summary>
        </member>
        <member name="P:Fluent.StyleSelectors.SplitedApplicationMenuItemItemContainerStyleSelector.Instance">
            <summary>
                A singleton instance for <see cref="T:Fluent.StyleSelectors.HeaderApplicationMenuItemItemContainerStyleSelector" />.
            </summary>
        </member>
        <member name="M:Fluent.StyleSelectors.SplitedApplicationMenuItemItemContainerStyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.TemplateSelectors.RibbonGroupBoxHeaderTemplateSelector">
            <summary>
            <see cref="T:System.Windows.Controls.DataTemplateSelector"/> for the header of <see cref="T:Fluent.RibbonGroupBox"/>.
            </summary>
        </member>
        <member name="F:Fluent.TemplateSelectors.RibbonGroupBoxHeaderTemplateSelector.Instance">
            <summary>
            Gets a static instance of <see cref="T:Fluent.TemplateSelectors.RibbonGroupBoxHeaderTemplateSelector"/>.
            </summary>
        </member>
        <member name="M:Fluent.TemplateSelectors.RibbonGroupBoxHeaderTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Fluent.Theming.RibbonLibraryThemeProvider">
            <summary>
            Provides theme resources from Fluent.Ribbon.
            </summary>
        </member>
        <member name="F:Fluent.Theming.RibbonLibraryThemeProvider.DefaultInstance">
            <summary>
            Gets the default instance of this class.
            </summary>
        </member>
        <member name="M:Fluent.Theming.RibbonLibraryThemeProvider.#ctor">
            <inheritdoc cref="T:ControlzEx.Theming.LibraryThemeProvider" />
        </member>
        <member name="M:Fluent.Theming.RibbonLibraryThemeProvider.FillColorSchemeValues(System.Collections.Generic.Dictionary{System.String,System.String},ControlzEx.Theming.RuntimeThemeColorValues)">
            <inheritdoc />
        </member>
    </members>
</doc>
